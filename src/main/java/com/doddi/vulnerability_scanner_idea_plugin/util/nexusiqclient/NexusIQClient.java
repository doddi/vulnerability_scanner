package com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResults;
import com.google.gson.Gson;
import com.intellij.openapi.diagnostic.Logger;
import okhttp3.Authenticator;
import okhttp3.Credentials;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Request.Builder;
import okhttp3.RequestBody;
import okhttp3.Response;


public class NexusIQClient
{
  public static final Logger LOGGER = Logger.getInstance(NexusIQClient.class);

  private static final String ENDPOINT_ASSETS = "/assets/index.html";

  private static final String ENDPOINT_APPLICATIONS = "/rest/integration/applications";

  public static final String ENDPOINT_APPLICATION = "/api/v2/applications";

  public static final String ENDPOINT_SUBMIT_COMPONENT = "/api/v2/evaluation/applications/";

  public static final String ENDPOINT_EVALUATION_RESULTS = "/api/v2/evaluation/applications/";

  private final String url;

  private final String username;

  private final String password;

  private final Gson gson = new Gson();

  private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");

  public NexusIQClient(final String url) {
    this(url, "", "");
  }

  public NexusIQClient(final String url, final String username, final String password) {
    this.url = url;
    this.username = username;
    this.password = password;
  }

  private OkHttpClient getAuthenticatedHttpClient() {
    final Authenticator authenticator = getAuthenticator();
    return new OkHttpClient.Builder()
        .authenticator(authenticator).build();
  }

  private Authenticator getAuthenticator() {
    return (route, response) -> {
      final String credentials = Credentials.basic(NexusIQClient.this.username, NexusIQClient.this.password);
      return response.request().newBuilder().header("Authorization", credentials).build();
    };
  }

  public boolean checkAssetsUrl() {
    final OkHttpClient client = new OkHttpClient();

    final Request request = new Builder()
        .url(url + ENDPOINT_ASSETS)
        .build();

    final Response response;
    try {
      response = client.newCall(request).execute();
    }
    catch (IOException | IllegalArgumentException e) {
      LOGGER.warn("Unable to connect");
      return false;
    }
    return response.isSuccessful();
  }

  public List<String> fetchApplicationIds() {
    final OkHttpClient client = getAuthenticatedHttpClient();

    final HttpUrl.Builder builder = HttpUrl.parse(this.url + ENDPOINT_APPLICATIONS)
        .newBuilder()
        .addQueryParameter("goal", "EVALUATE_COMPONENT");

    final Request request = new Builder()
        .url(builder.build())
        .build();

    try {
      final Response response = client.newCall(request).execute();
      if (response.isSuccessful()) {

        final ApplicationSummaries applicationSummaries = gson
            .fromJson(response.body().string(), ApplicationSummaries.class);

        return Arrays.stream(applicationSummaries.getApplicationSummaries())
            .map(ApplicationSummary::getPublicId)
            .collect(Collectors.toList());
      }
    }
    catch (IOException e) {
      LOGGER.warn("Unable to get list of application ids");
    }

    return null;
  }

  public String getInternalAppId(final String applicationId) {
    final OkHttpClient client = getAuthenticatedHttpClient();

    final HttpUrl.Builder builder = HttpUrl.parse(this.url + ENDPOINT_APPLICATION)
        .newBuilder()
        .addQueryParameter("publicId", applicationId);

    final Request request = new Builder()
        .url(builder.build())
        .build();

    try {
      final Response response = client.newCall(request).execute();
      if (response.isSuccessful()) {

        final Applications applications = gson
            .fromJson(response.body().string(), Applications.class);

        return Arrays.stream(applications.getApplications())
            .map(Application::getId)
            .findFirst()
            .orElse(null);
      }
    }
    catch (IOException e) {
      LOGGER.warn("Unable to get list of application ids");
    }
    return null;
  }

  public ComponentSubmittedResponse submitComponents(final String internalId, final List<PackageUrl> componentsToScan) {

    final Component[] components = componentsToScan.stream()
        .map(PackageUrl::toString)
        .map(Component::new)
        .toArray(Component[]::new);


    final ComponentSubmitRequest submitRequest = new ComponentSubmitRequest();
    submitRequest.setComponents(components);

    final OkHttpClient client = getAuthenticatedHttpClient();

    final HttpUrl.Builder builder = HttpUrl.parse(this.url + ENDPOINT_SUBMIT_COMPONENT + internalId)
        .newBuilder();

    final Request request = new Builder()
        .url(builder.build())
        .post(RequestBody.create(gson.toJson(submitRequest), JSON))
        .build();

    try {
      final Response response = client.newCall(request).execute();
      if (response.isSuccessful()) {
        return gson.fromJson(response.body().string(), ComponentSubmittedResponse.class);
      }
    }
    catch (IOException e) {
      LOGGER.warn("Unable to submit components");
    }

    return null;
  }

  public EvaluationResults fetchEvaluationResults(final String internalId, final String resultId) {
    final OkHttpClient client = getAuthenticatedHttpClient();

    final HttpUrl.Builder builder = HttpUrl
        .parse(this.url + ENDPOINT_EVALUATION_RESULTS + internalId + "/results/" + resultId)
        .newBuilder();

    final Request request = new Builder()
        .url(builder.build())
        .build();

    try {
      int attempts = 0;
      while (attempts++ <= 10) {
        final Response response = client.newCall(request).execute();
        if (response.isSuccessful()) {
          return gson.fromJson(response.body().string(), EvaluationResults.class);
        }
        else {
          try {
            Thread.sleep(1000);
          }
          catch (InterruptedException e) {
            LOGGER.warn("Unable to wait");
          }
        }
      }
    }
    catch (IOException e) {
      LOGGER.warn("Unable to get list of application ids");
    }
    return null;
  }
}

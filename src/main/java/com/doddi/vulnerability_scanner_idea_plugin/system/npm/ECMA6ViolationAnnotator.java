package com.doddi.vulnerability_scanner_idea_plugin.system.npm;

import com.doddi.vulnerability_scanner_idea_plugin.system.ViolationAnnotator;
import com.intellij.lang.annotation.AnnotationHolder;
import com.intellij.lang.javascript.psi.JSCallExpression;
import com.intellij.lang.javascript.psi.JSExpression;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;

public class ECMA6ViolationAnnotator
    extends ViolationAnnotator
{
  @Override
  public void annotate(@NotNull final PsiElement element, @NotNull final AnnotationHolder holder) {
    if (element instanceof JSCallExpression) {
      final String require = ((JSCallExpression) element).getMethodExpression().getText();
      if ("require".equals(require)) {
        final @NotNull JSExpression[] arguments = ((JSCallExpression) element).getArgumentList().getArguments();
        if (arguments.length == 1) {
          final JSExpression argument = arguments[0];
          final String component = argument.getText().replace("'", "");
          showIfVulnerable(element.getProject(), holder, element.getTextRange(), component);
        }
      }
    }
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.util.List;
import java.util.Set;

import com.doddi.vulnerability_scanner_idea_plugin.entity.LibraryToScan;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.openapi.vfs.newvfs.BulkFileListener;
import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileEvent;
import org.jetbrains.annotations.NotNull;

public abstract class FileBasedDetector
    implements ProjectTypeDetector
{
  public final String filename;

  protected FileBasedDetector(final String type) {this.filename = type;}

  @Override
  public abstract String getLanguageType();

  @Override
  public boolean detect(final Project project, final Module module) {
    return VirtualFileManager.getInstance()
        .findFileByUrl("file://" + project.getPresentableUrl() + "/" + filename) != null;
  }

  @Override
  public void start(final Project project) {
    VulnerabilityService.getInstance().setPopulator(getPopulator());

    project.getMessageBus().connect().subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener()
    {
      @Override
      public void after(@NotNull final List<? extends VFileEvent> events) {
        for (VFileEvent event : events) {
          if (event.getFile().getPresentableUrl().equals(project.getPresentableUrl() + "/" + filename) &&
              event instanceof VFileContentChangeEvent) {
            scanProject(project);
          }
        }
      }
    });

    scanProject(project);
  }

  public void scanProject(final Project project) {
    final Set<LibraryToScan> dependencies = getLibraryToScans(project);
    final VulnerabilityService vulnerabilityService = VulnerabilityService.getInstance();
    vulnerabilityService.checkLibraries(dependencies);
  }

  public abstract Set<LibraryToScan> getLibraryToScans(Project project);

  public abstract Populator getPopulator();
}

package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.util.HashMap;
import java.util.Map;

import com.doddi.vulnerability_scanner_idea_plugin.system.golang.GolangTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.maven.MavenProjectTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.python.PythonTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.rust.RustTypeDetector;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManagerListener;
import org.jetbrains.annotations.NotNull;

public class ProjectChangeListener implements ProjectManagerListener
{
  private final Map<String, ProjectTypeDetector> detectors;

  public ProjectChangeListener() {
    detectors = new HashMap<>();

    final MavenProjectTypeDetector mavenProjectTypeDetector = ServiceManager
        .getService(MavenProjectTypeDetector.class);
    if (mavenProjectTypeDetector != null) {
      detectors.put(mavenProjectTypeDetector.getLanguageType(), mavenProjectTypeDetector);
    }

    final RustTypeDetector rustTypeDetector = ServiceManager.getService(RustTypeDetector.class);
    if (rustTypeDetector != null) {
      detectors.put(rustTypeDetector.getLanguageType(), rustTypeDetector);
    }

    final GolangTypeDetector golangTypeDetector = ServiceManager.getService(GolangTypeDetector.class);
    if (golangTypeDetector != null) {
      detectors.put(golangTypeDetector.getLanguageType(), golangTypeDetector);
    }

    final PythonTypeDetector pythonTypeDetector = ServiceManager.getService(PythonTypeDetector.class);
    if (pythonTypeDetector != null) {
      detectors.put(pythonTypeDetector.getLanguageType(), pythonTypeDetector);
    }
  }

  @Override
  public void projectOpened(@NotNull final Project project) {
    final Module[] modules = ModuleManager.getInstance(project).getModules();
    for (Module module : modules) {
      detectors.forEach((name, detector) -> {
        if (detector.detect(project, module)) {
          detector.start(project);
        }
      });
    }
  }
}

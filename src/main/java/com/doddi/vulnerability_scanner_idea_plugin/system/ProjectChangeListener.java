package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.util.HashMap;
import java.util.Map;

import com.doddi.vulnerability_scanner_idea_plugin.system.golang.GolangTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.maven.MavenProjectTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.python.PythonTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.rust.RustTypeDetector;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManagerListener;
import org.jetbrains.annotations.NotNull;

public class ProjectChangeListener
    implements ProjectManagerListener
{
  public static final Logger LOGGER = Logger.getInstance(ProjectChangeListener.class);

  private static final Map<String, ProjectTypeDetector> detectors = new HashMap<>();

  // Needed so that the plugin can work in various IDEs, otherwise establishing MavenProjectTypeDetector
  // in Goland IDE for example fails because it is unaware of Maven
  static {
    maybeAddDetector(MavenProjectTypeDetector.JAVA_TYPE, MavenProjectTypeDetector.class);
    maybeAddDetector(GolangTypeDetector.GOLANG_TYPE, GolangTypeDetector.class);
    maybeAddDetector(PythonTypeDetector.PYTHON_TYPE, PythonTypeDetector.class);
    maybeAddDetector(RustTypeDetector.RUST_TYPE, RustTypeDetector.class);
  }

  private static void maybeAddDetector(String type, Class<? extends ProjectTypeDetector> clazz) {
    final ProjectTypeDetector detector = ServiceManager.getService(clazz);
    if (detector != null) {
      detectors.put(type, detector);
    }
  }

  @Override
  public void projectOpened(@NotNull final Project project) {
    final Module[] modules = ModuleManager.getInstance(project).getModules();
    for (Module module : modules) {
      detectors.forEach((name, detector) -> {
        if (detector.detect(project, module)) {
          detector.start(project);
        }
      });
    }
  }
}

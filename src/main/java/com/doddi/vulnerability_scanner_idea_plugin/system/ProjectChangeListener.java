package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.util.HashMap;
import java.util.Map;

import com.doddi.vulnerability_scanner_idea_plugin.system.golang.GolangTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.maven.MavenProjectTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.python.PythonTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.rust.RustTypeDetector;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManagerListener;
import org.jetbrains.annotations.NotNull;

public class ProjectChangeListener
    implements ProjectManagerListener
{
  public static final Logger LOGGER = Logger.getInstance(ProjectChangeListener.class);

  private static final Map<String, ProjectTypeDetector> detectors = new HashMap<String, ProjectTypeDetector>()
  {{
    put(MavenProjectTypeDetector.JAVA_TYPE, new MavenProjectTypeDetector());
    put(GolangTypeDetector.GOLANG_TYPE, new GolangTypeDetector());
    put(PythonTypeDetector.PYTHON_TYPE, new PythonTypeDetector());
    put(RustTypeDetector.RUST_TYPE, new RustTypeDetector());
  }};

  @Override
  public void projectOpened(@NotNull final Project project) {
    final Module[] modules = ModuleManager.getInstance(project).getModules();
    for (Module module : modules) {
      detectors.forEach((name, detector) -> {
        if (detector.detect(project, module)) {
          detector.start(project);
        }
      });
    }
  }
}

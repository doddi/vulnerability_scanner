package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManagerListener;
import org.jetbrains.annotations.NotNull;
import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;

public class ProjectChangeListener implements ProjectManagerListener
{
  public static final Logger LOGGER = Logger.getInstance(ProjectChangeListener.class);

  private final Map<String, ProjectTypeDetector> detectors;

  public ProjectChangeListener() {
    detectors = new HashMap<>();
    findProjectTypeDetectors();
  }

  public void findProjectTypeDetectors() {
    final Reflections reflections = new Reflections("com.doddi.vulnerability_scanner_idea_plugin.system",
        new SubTypesScanner());
    final Set<Class<? extends ProjectTypeDetector>> classes = reflections.getSubTypesOf(ProjectTypeDetector.class);

    for (Class<? extends ProjectTypeDetector> implClass : classes) {
      LOGGER.debug(implClass.getSimpleName());

      final ProjectTypeDetector detector;
      try {
        detector = implClass.newInstance();
        detectors.put(detector.getLanguageType(), detector);
      }
      catch (IllegalAccessException | InstantiationException e) {
        LOGGER.warn(String.format("Unable to create %s", implClass.getSimpleName()));
      }
    }
  }

  @Override
  public void projectOpened(@NotNull final Project project) {
    final Module[] modules = ModuleManager.getInstance(project).getModules();
    for (Module module : modules) {
      detectors.forEach((name, detector) -> {
        if (detector.detect(project, module)) {
          detector.start(project);
        }
      });
    }
  }
}

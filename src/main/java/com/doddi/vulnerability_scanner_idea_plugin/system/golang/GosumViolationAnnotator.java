package com.doddi.vulnerability_scanner_idea_plugin.system.golang;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.doddi.vulnerability_scanner_idea_plugin.system.ViolationAnnotator;
import com.goide.vgo.mod.psi.VgoModuleSpec;
import com.intellij.lang.annotation.AnnotationHolder;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.TextRange;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;

public class GosumViolationAnnotator
    extends ViolationAnnotator
{
  @Override
  public void annotate(@NotNull final PsiElement element, @NotNull final AnnotationHolder holder) {
    if ("go.mod".equals(element.getContainingFile().getName())) {
      if (element instanceof VgoModuleSpec) {
        VgoModuleSpec module = (VgoModuleSpec) element;

        final PackageUrl packageUrl = getPackageUrl(module);

        showIfPackageVulnerable(element.getProject(), holder, element.getTextRange(),
            packageUrl);
      }
    }
  }

  private PackageUrl getPackageUrl(final VgoModuleSpec moduleSpec) {
    final String module = moduleSpec.getIdentifier().getText();
    String namespace = module.substring(0, module.lastIndexOf("/"));
    String name = module.substring(module.lastIndexOf("/") + 1).trim();
    final String version = moduleSpec.getModuleVersion().getText();

    return PackageUrl.builder()
        .type("golang")
        .namespace(namespace)
        .name(name)
        .version(version)
        .build();
  }

  private void showIfPackageVulnerable(final Project project,
                                       final AnnotationHolder holder,
                                       final TextRange range,
                                       final PackageUrl packageUrl)
  {
    VulnerabilityService.getInstance(project)
        .isPackageVulnerable(packageUrl)
        .ifPresent(component -> doShow(holder, range, component));
  }
}

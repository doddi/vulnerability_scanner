package com.doddi.vulnerability_scanner_idea_plugin.system.golang.gomod;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.entity.LibraryToScan;
import com.google.common.io.LineReader;
import com.intellij.openapi.diagnostic.Logger;

public class GomodIndividualParser
    implements GomodParser
{
  private static Logger LOGGER = Logger.getInstance(GomodIndividualParser.class);

  private LineReader reader;

  public GomodIndividualParser(final LineReader reader) {
    this.reader = reader;
  }

  @Override
  public Set<LibraryToScan> parse(final String currentLine) throws IOException {
    Set<LibraryToScan> libraries = new HashSet<>();

    String line = currentLine;
    while (line != null && line.startsWith("require")) {
      final String[] tokens = line.trim().split(" ");
      if (tokens.length < 3) {
        LOGGER.warn("Not enough tokens to parse requirement");
        return libraries;
      }
      if (!tokens[0].contains("require")) {
        LOGGER.warn("Line does not contain require at the start");
        return libraries;
      }

      String require = tokens[1].trim();
      String namespace = require.substring(0, require.lastIndexOf("/"));
      String name = require.substring(require.lastIndexOf("/") + 1).trim();
      String version = tokens[2];

      line = reader.readLine();

      final PackageUrl packageUrl = PackageUrl.builder()
          .type("golang")
          .namespace(namespace)
          .name(name)
          .version(version)
          .build();

      libraries.add(new LibraryToScan(packageUrl, null));
    }

    return libraries;
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.system.maven;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import com.doddi.vulnerability_scanner_idea_plugin.entity.LibraryToScan;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.system.Populator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.doddi.vulnerability_scanner_idea_plugin.system.maven.JarParser.findClasses;

public class MavenPopulator
    implements Populator
{
  public static final Logger LOGGER = LoggerFactory.getLogger(MavenPopulator.class);

  private final Map<String, VulnerableComponent> components = new HashMap<>();

  @Override
  public void populate(final Set<LibraryToScan> libraries, final List<VulnerableComponent> vulnerableComponents) {
    populateComponentClassNames(libraries, vulnerableComponents);
    populateVulnerableComponents(vulnerableComponents);
  }

  @Override
  public Map<String, VulnerableComponent> getVulnerableComponents() {
    return components;
  }

  @Override
  public Optional<VulnerableComponent> isVulnerable(final String name) {
    return components.values().stream()
        .filter(component -> component.getClasses().contains(name))
        .findFirst();
  }

  private void populateComponentClassNames(final Set<LibraryToScan> librariesScanned,
                                           final List<VulnerableComponent> vulnerableLibraries)
  {
    for (VulnerableComponent component : vulnerableLibraries) {
      librariesScanned.stream()
          .filter(library -> library.getPackageUrl().equals(component.getPackageUrl()))
          .findFirst()
          .ifPresent(scannedLibrary -> populateClasses(component, scannedLibrary));
    }
  }

  private void populateClasses(final VulnerableComponent component, final LibraryToScan scannedLibrary) {
    LOGGER.info("Collecting class names contained in {}", scannedLibrary.getFile().getName());
    final String presentableUrl = scannedLibrary.getFile().getPresentableUrl();
    final List<String> classes = findClasses(presentableUrl);
    component.setClasses(classes);
  }

  private void populateVulnerableComponents(final List<VulnerableComponent> vulnerableComponents) {
    components.clear();
    vulnerableComponents.forEach(component -> components.put(component.getPackageUrl().toString(), component));
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.system.maven;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.goodies.packageurl.PackageUrlBuilder;

import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.doddi.vulnerability_scanner_idea_plugin.system.ViolationAnnotator;
import com.intellij.lang.annotation.AnnotationHolder;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.TextRange;
import com.intellij.psi.PsiElement;
import com.intellij.psi.impl.source.xml.XmlTagImpl;
import com.intellij.psi.impl.source.xml.XmlTagValueImpl;
import com.intellij.psi.xml.XmlTagChild;
import org.jetbrains.annotations.NotNull;

public class PomViolationAnnotator
    extends ViolationAnnotator
{
  @Override
  public void annotate(@NotNull final PsiElement element, @NotNull final AnnotationHolder holder) {
    if ("pom.xml".equals(element.getContainingFile().getName())) {
      if (element instanceof XmlTagImpl) {
        if (((XmlTagImpl) element).getValue() instanceof XmlTagValueImpl) {
          if ("version".equals(((XmlTagImpl) element).getName())) {
            final XmlTagChild[] dependencies = ((XmlTagImpl) element.getParent()).getValue()
                .getChildren();

            final PackageUrl packageUrl = getPackageUrlBuilder(dependencies);

            showIfPackageVulnerable(element.getProject(), holder, element.getTextRange(),
                packageUrl);
          }
        }
      }
    }
  }

  private PackageUrl getPackageUrlBuilder(final XmlTagChild[] dependencies) {
    final PackageUrlBuilder packageUrlBuilder = PackageUrl.builder()
        .type("maven")
        .qualifier("type", "jar");
    for (XmlTagChild xmlTag : dependencies) {
      if (xmlTag instanceof XmlTagImpl) {
        final XmlTagImpl tag = (XmlTagImpl) xmlTag;
        if ("groupId".equals(tag.getName())) {
          packageUrlBuilder.namespace(tag.getValue().getText());
        }
        else if ("artifactId".equals(tag.getName())) {
          packageUrlBuilder.name(tag.getValue().getText());
        }
        else if ("version".equals(tag.getName())) {
          packageUrlBuilder.version(tag.getValue().getText());
        }
      }
    }
    return packageUrlBuilder.build();
  }

  private void showIfPackageVulnerable(final Project project,
                                       final AnnotationHolder holder,
                                       final TextRange range,
                                       final PackageUrl packageUrl)
  {
    VulnerabilityService.getInstance(project)
        .isPackageVulnerable(packageUrl)
        .ifPresent(component -> doShow(holder, range, component));
  }
}

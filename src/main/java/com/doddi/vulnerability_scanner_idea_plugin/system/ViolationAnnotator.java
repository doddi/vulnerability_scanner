package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.awt.*;

import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerManagerService;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.lang.annotation.AnnotationHolder;
import com.intellij.lang.annotation.Annotator;
import com.intellij.lang.annotation.HighlightSeverity;
import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
import com.intellij.openapi.editor.markup.EffectType;
import com.intellij.openapi.editor.markup.TextAttributes;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.TextRange;
import com.intellij.ui.JBColor;

public abstract class ViolationAnnotator
    implements Annotator
{

    private static final TextAttributes HighLightError = new TextAttributes(
        DefaultLanguageHighlighterColors.TEMPLATE_LANGUAGE_COLOR.getDefaultAttributes().getForegroundColor(),
        DefaultLanguageHighlighterColors.TEMPLATE_LANGUAGE_COLOR.getDefaultAttributes().getBackgroundColor(),
        JBColor.RED,
        EffectType.LINE_UNDERSCORE,
        Font.PLAIN);

    private static final TextAttributes HighLightWarning = new TextAttributes(
        DefaultLanguageHighlighterColors.TEMPLATE_LANGUAGE_COLOR.getDefaultAttributes().getForegroundColor(),
        DefaultLanguageHighlighterColors.TEMPLATE_LANGUAGE_COLOR.getDefaultAttributes().getBackgroundColor(),
        JBColor.YELLOW,
        EffectType.LINE_UNDERSCORE,
        Font.PLAIN);

    private static final TextAttributes HighLightInfo = new TextAttributes(
        DefaultLanguageHighlighterColors.TEMPLATE_LANGUAGE_COLOR.getDefaultAttributes().getForegroundColor(),
        DefaultLanguageHighlighterColors.TEMPLATE_LANGUAGE_COLOR.getDefaultAttributes().getBackgroundColor(),
        JBColor.BLUE,
        EffectType.LINE_UNDERSCORE,
        Font.PLAIN);

    protected void showIfVulnerable(final Project project,
                                    final AnnotationHolder holder,
                                    final TextRange range,
                                    final String componentName)
    {
        VulnerabilityService.getInstance(project)
            .isVulnerable(componentName)
            .ifPresent(component -> doShow(holder, range, component));
    }

    protected void doShow(final AnnotationHolder holder,
                          final TextRange range,
                          final VulnerableComponent componentName)
    {
        final ScannerManagerService scannerManagerService = ScannerManagerService.getInstance();
        final String message = componentName.buildPackageInformation(scannerManagerService.getCurrentScannerName(),
            scannerManagerService.getCurrentScannerLink());


        holder.newAnnotation(HighlightSeverity.ERROR, "")
            .tooltip(message)
            .range(range)
            .enforcedTextAttributes(calculateUnderscoreColour(componentName.getSeverity()))
            .create();
    }

    private TextAttributes calculateUnderscoreColour(final int severity) {
        if (severity >= 7) {
            return HighLightError;
        }
        else if (severity >= 3) {
            return HighLightWarning;
        }
        return HighLightInfo;
    }

}

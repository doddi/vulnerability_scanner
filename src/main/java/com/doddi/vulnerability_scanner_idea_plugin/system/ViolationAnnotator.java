package com.doddi.vulnerability_scanner_idea_plugin.system;

import com.doddi.vulnerability_scanner_idea_plugin.VulnerabilityMessageProvider;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerManagerService;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.lang.annotation.AnnotationHolder;
import com.intellij.lang.annotation.Annotator;
import com.intellij.lang.annotation.HighlightSeverity;
import com.intellij.openapi.editor.colors.CodeInsightColors;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.TextRange;

public interface ViolationAnnotator extends Annotator {

    default void showIfVulnerable(final Project project,
                                  final AnnotationHolder holder,
                                  final TextRange range,
                                  final String componentName) {
        VulnerabilityService.getInstance(project)
                .isVulnerable(componentName)
                .ifPresent(component -> doShow(holder, range, component));
    }

    default void doShow(final AnnotationHolder holder,
                        final TextRange range,
                        final VulnerableComponent componentName) {
        final ScannerManagerService scannerManagerService = ScannerManagerService.getInstance();
        final String message = VulnerabilityMessageProvider.buildGutterMessage(scannerManagerService.getCurrentScannerName(),
            scannerManagerService.getCurrentScannerLink(), componentName);

        holder.newAnnotation(HighlightSeverity.INFORMATION, "")
                .tooltip(message)
                .range(range)
                .textAttributes(CodeInsightColors.ERRORS_ATTRIBUTES)
                .create();
    }

}

package com.doddi.vulnerability_scanner_idea_plugin.system.rust;

import java.util.Optional;

import com.doddi.vulnerability_scanner_idea_plugin.marker.ViolationMarker;
import com.doddi.vulnerability_scanner_idea_plugin.module.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.psi.PsiElement;
import com.intellij.psi.impl.source.tree.LeafPsiElement;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RustViolationMarker extends ViolationMarker
{
  public static final Logger LOGGER = LoggerFactory.getLogger(RustViolationMarker.class);

  @Override
  public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element) {
    if (element instanceof LeafPsiElement) {
      if (((LeafPsiElement) element).getElementType().toString().equals("use")) {
        final String use = element.getNextSibling().getNextSibling().getNode().getText();
        final String[] split = use.split("::");

        final Optional<VulnerableComponent> vulnerable = VulnerabilityService.getInstance()
            .isVulnerable(split[0]);

        if (vulnerable.isPresent()) {
          LOGGER.info("Vulnerabilities found for {}", use);
          return markVulnerable(element, vulnerable.get());
        }
      }

    }
    return null;
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.system.python;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.goodies.packageurl.PackageUrlBuilder;

import com.doddi.vulnerability_scanner_idea_plugin.entity.LibraryToScan;
import com.doddi.vulnerability_scanner_idea_plugin.system.FileBasedDetector;
import com.doddi.vulnerability_scanner_idea_plugin.system.Populator;
import com.google.common.collect.Sets;
import com.intellij.openapi.project.Project;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PythonTypeDetector extends FileBasedDetector
{
  public static final Logger LOGGER = LoggerFactory.getLogger(PythonTypeDetector.class);

  private static final String PYTHON_TYPE = "Python";

  private final Populator populator;

  public PythonTypeDetector() {
    super("requirements.txt");
    populator = new PythonPopulator();
  }

  @Override
  public String getLanguageType() {
    return PYTHON_TYPE;
  }

  @Override
  public Set<LibraryToScan> getLibraryToScans(final Project project) {
    final String fullFilename = project.getPresentableUrl() + "/" + filename;
    return readRequirements(fullFilename);
  }

  @Override
  public Populator getPopulator() {
    return populator;
  }

  private Set<LibraryToScan> readRequirements(final String filename) {
    final HashSet<LibraryToScan> hashSet = Sets.newHashSet();
    try(final BufferedReader reader = new BufferedReader(new FileReader(filename))) {
      String line;
      while ((line = reader.readLine()) != null) {
        final String[] split = line.split("==");
        final PackageUrl packageUrl = new PackageUrlBuilder()
            .type("pypi")
            .name(split[0])
            .version(split[1])
            .build();
        hashSet.add(new LibraryToScan(packageUrl, null));
      }
    }
    catch (IOException e) {
      LOGGER.error("Unable to open file {}: {}", filename, e.getMessage());
    }
    return hashSet;
  }
}
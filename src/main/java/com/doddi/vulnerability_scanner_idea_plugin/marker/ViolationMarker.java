package com.doddi.vulnerability_scanner_idea_plugin.marker;

import com.doddi.vulnerability_scanner_idea_plugin.module.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.intellij.codeInsight.daemon.GutterIconNavigationHandler;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.codeInsight.daemon.LineMarkerProviderDescriptor;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.editor.markup.GutterIconRenderer.Alignment;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;


public abstract class ViolationMarker
    extends LineMarkerProviderDescriptor
{
  private static final GutterIconNavigationHandler<PsiElement> ALERT_HANDLER = (e, elt) -> {};

  @Override
  public String getName() {
    return "Policy Violation";
  }

  public abstract LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element);

  @NotNull
  private String buildVulnerabilityMessage(final VulnerableComponent vulnerable) {
    ScannerService scannerService = ServiceManager.getServiceIfCreated(ScannerService.class);

    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append("Vulnerability information Provided by: ");
    stringBuffer.append(buildLink(scannerService.getName(), scannerService.getUrl()));
    stringBuffer.append(String.format("\n\n<i>%s</i>", vulnerable.getPackageUrl().toString()));
    stringBuffer.append(": contains ");
    stringBuffer.append(String.format("<b>%s</b>", vulnerable.getVulnerabilities().size()));
    stringBuffer.append(getVulnerabilityString(vulnerable.getVulnerabilities().size()));
    stringBuffer.append("\n\n<ul>");
    vulnerable.getVulnerabilities().forEach(v -> {
      stringBuffer.append("<li>");
      stringBuffer.append(buildLink(v.getTitle(), v.getReference().toString()));
      stringBuffer.append("</li>");
    });
    stringBuffer.append("</ul>");
    return stringBuffer.toString();
  }

  @NotNull
  private String getVulnerabilityString(int vulnerable) {
    return vulnerable > 1 ? " vulnerabilities" : " vulnerability";
  }

  private String buildLink(String title, String link) {
    return String.format("<a href=%s>%s</a>", link, title);
  }

  @NotNull
  protected LineMarkerInfo markVulnerable(@NotNull final PsiElement element,
                                        final VulnerableComponent vulnerable)
  {
    return new LineMarkerInfo<>(element, element.getTextRange(), ViolationIcons.ALERT,
        __ -> buildVulnerabilityMessage(vulnerable),
        ALERT_HANDLER,
        Alignment.RIGHT);
  }

  @Nullable
  @Override
  public Icon getIcon() {
    return ViolationIcons.ALERT;
  }
}

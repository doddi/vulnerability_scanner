package com.doddi.vulnerability_scanner_idea_plugin.listener;

import com.doddi.vulnerability_scanner_idea_plugin.VulnerabilityMessageProvider;
import com.doddi.vulnerability_scanner_idea_plugin.module.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.lang.annotation.AnnotationHolder;
import com.intellij.lang.annotation.Annotator;
import com.intellij.lang.annotation.HighlightSeverity;
import com.intellij.openapi.editor.colors.CodeInsightColors;
import com.intellij.openapi.util.TextRange;

public interface ViolationAnnotator extends Annotator {

    default void showIfVulnerable(final AnnotationHolder holder, final TextRange range, String componentName) {
        VulnerabilityService.getInstance()
                .isVulnerable(componentName)
                .ifPresent(component -> doShow(holder, range, component));
    }

    default void doShow(AnnotationHolder holder, TextRange range, VulnerableComponent componentName) {
        ScannerService scannerService = ScannerService.getInstance();
        String message = VulnerabilityMessageProvider.buildGutterMessage(scannerService.getName(), scannerService.getUrl(), componentName);
        holder.newAnnotation(HighlightSeverity.INFORMATION, "")
                .tooltip(message)
                .range(range)
                .textAttributes(CodeInsightColors.ERRORS_ATTRIBUTES)
                .create();
    }

}

package com.doddi.vulnerability_scanner_idea_plugin.listener.maven;


import com.doddi.vulnerability_scanner_idea_plugin.marker.ViolationIcons;
import com.doddi.vulnerability_scanner_idea_plugin.marker.ViolationMarker;
import com.doddi.vulnerability_scanner_idea_plugin.module.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiJavaCodeReferenceElement;
import com.intellij.psi.impl.source.PsiImportStatementImpl;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.util.Optional;


public class MavenViolationMarker
    extends ViolationMarker
{
  public static final Logger LOGGER = LoggerFactory.getLogger(MavenViolationMarker.class);

  @Override
  public String getName() {
    return "Policy Violation";
  }

  @Nullable
  @Override
  public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element) {
    if (element instanceof PsiImportStatementImpl) {
      final PsiJavaCodeReferenceElement importReference = ((PsiImportStatementImpl) element).getImportReference();

      if(importReference != null) {
        final Optional<VulnerableComponent> vulnerable = VulnerabilityService.getInstance()
            .isVulnerable(importReference.getQualifiedName());

        if (vulnerable.isPresent()) {
          LOGGER.info("Vulnerabilities found for {}", importReference.getQualifiedName());
          return markVulnerable(element, vulnerable.get());
        }
      }
    }
    return null;
  }

  @Nullable
  @Override
  public Icon getIcon() {
    return ViolationIcons.ALERT;
  }
}

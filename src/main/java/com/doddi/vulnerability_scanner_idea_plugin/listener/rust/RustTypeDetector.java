package com.doddi.vulnerability_scanner_idea_plugin.listener.rust;

import java.util.List;
import java.util.Set;

import com.doddi.vulnerability_scanner_idea_plugin.listener.ProjectTypeDetector;
import com.doddi.vulnerability_scanner_idea_plugin.module.LibraryToScan;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleType;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.openapi.vfs.newvfs.BulkFileListener;
import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileEvent;
import org.jetbrains.annotations.NotNull;

public class RustTypeDetector implements ProjectTypeDetector
{
  private static final String RUST_TYPE = "Rust";

  final TomlReader tomlReader;

  public RustTypeDetector() {
    tomlReader = new TomlReader();
  }

  @Override
  public String getType() {
    return RUST_TYPE;
  }

  @Override
  public boolean detect(final Module module) {
    return RUST_TYPE.equals(ModuleType.get(module).getName());
  }

  @Override
  public void start(final Project project) {
    VulnerabilityService.getInstance().setPopulator(new RustPopulator());

    project.getMessageBus().connect().subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener() {
      @Override
      public void after(@NotNull final List<? extends VFileEvent> events) {
        for (VFileEvent event : events) {
          if (event.getFile().getPresentableUrl().equals(project.getPresentableUrl() + "/Cargo.lock") && event instanceof VFileContentChangeEvent) {
            scanProject(project);
          }
        }
      }
    });

    scanProject(project);
  }

  private void scanProject(final Project project) {
    final Set<LibraryToScan> dependencies = tomlReader.getDependencies(project.getPresentableUrl() + "/Cargo.lock");
    final VulnerabilityService vulnerabilityService = VulnerabilityService.getInstance();
    vulnerabilityService.checkLibraries(dependencies);
  }
}

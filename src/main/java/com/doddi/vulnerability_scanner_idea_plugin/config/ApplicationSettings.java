package com.doddi.vulnerability_scanner_idea_plugin.config;

import com.google.common.base.Strings;
import com.intellij.credentialStore.CredentialAttributes;
import com.intellij.credentialStore.CredentialAttributesKt;
import com.intellij.credentialStore.Credentials;
import com.intellij.ide.passwordSafe.PasswordSafe;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.util.xmlb.XmlSerializerUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@State(
    name = "Vulnerability.Scanner.ProjectSettings",
    storages = {@Storage(value = "vulnerability_scanner.xml")}
)
public class ApplicationSettings
    implements PersistentStateComponent<ApplicationConfiguration>
{
  private final static Logger LOGGER = Logger.getInstance(ApplicationSettings.class);

  public static final String PASSWORD_KEY = "Vulnerability.Scanner.Password";

  private final ProjectConfigurationListener publisher;

  private ApplicationConfiguration configuration;

  public static ApplicationSettings getInstance() {
    return ServiceManager.getService(ApplicationSettings.class);
  }

  public ApplicationSettings() {
    this.publisher = ApplicationManager.getApplication().getMessageBus()
        .syncPublisher(ProjectConfigurationListener.TOPIC);
    this.configuration = new ApplicationConfiguration();
    this.configuration.setScannerType(ApplicationConfiguration.DEFAULT_SCANNER);
  }

  @Nullable
  @Override
  public ApplicationConfiguration getState() {
    return configuration;
  }

  @Override
  public void loadState(@NotNull final ApplicationConfiguration state) {
    XmlSerializerUtil.copyBean(state, configuration);
  }

  public void setConfiguration(final ApplicationConfiguration applicationConfiguration) {
    configuration = applicationConfiguration;
    storePassword(applicationConfiguration.getPassword());

    publisher.configurationChanged();
  }

  private void storePassword(final String password) {
    CredentialAttributes credentialAttributes = createCredentialAttributes();
    PasswordSafe.getInstance().setPassword(credentialAttributes, password);
  }

  private String readPassword() {
    CredentialAttributes credentialAttributes = createCredentialAttributes();
    final Credentials credentials = PasswordSafe.getInstance().get(credentialAttributes);
    if (credentials != null) {
      return PasswordSafe.getInstance().getPassword(credentialAttributes);
    }
    return null;
  }

  private CredentialAttributes createCredentialAttributes() {
    return new CredentialAttributes(
        CredentialAttributesKt.generateServiceName("com.doddi.vulnerability_scanner", PASSWORD_KEY));
  }

  public boolean isConfigured() {
    return this.configuration.getScannerType() != null;
  }

  public boolean useAuthentication() {
    return !Strings.isNullOrEmpty(this.configuration.getUsername()) && !Strings.isNullOrEmpty(readPassword());
  }

  public ApplicationConfiguration getStateWithPassword() {
    if (useAuthentication()) {
      this.configuration.setPassword(readPassword());
    }
    return configuration;
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.config;

import java.awt.event.ItemEvent;

import javax.swing.*;

import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.ui.components.JBPasswordField;
import com.intellij.ui.components.JBTextField;

public class ProjectSettingsPanel
{
  public static final Logger LOGGER = Logger.getInstance(ProjectSettingsPanel.class);

  private final ProjectSettings projectSettings;

  private final ApplicationSettings applicationSettings;

  private JPanel panel;

  private ComboBox comboMode;

  private ScannerTypeComboBoxModel scannerTypeComboBoxModel = new ScannerTypeComboBoxModel();

  private ScannerTypeListCellRenderer scannerTypeListCellRenderer = new ScannerTypeListCellRenderer();

  private JBTextField txtUsername;

  private JBPasswordField txtPassword;

  private JBTextField txtUrl;

  private JLabel lblUrl;

  private ComboBox comboAppId;

  private JLabel lblAppId;

  private JLabel lblUsername;

  private JLabel lblPassword;

  private AppIdComboBoxModel appIdComboBoxModel = new AppIdComboBoxModel();

  public ProjectSettingsPanel(final Project project,
                              final ProjectSettings projectSettings,
                              final ApplicationSettings applicationSettings)
  {
    this.projectSettings = projectSettings;
    this.applicationSettings = applicationSettings;

    scannerTypeComboBoxModel = getAvailableScanners();
    comboMode.setModel(scannerTypeComboBoxModel);
    comboMode.setRenderer(scannerTypeListCellRenderer);
    comboMode.setEnabled(true);
    comboMode.addItemListener(event -> {
      if (ItemEvent.SELECTED == event.getStateChange()) {
        final UIConfiguration uiConfig = (UIConfiguration) event.getItem();
        showNexusIQMode(uiConfig.hasAppId());
        showAuth(uiConfig.hasAuth());
      }
    });

    appIdComboBoxModel.addElement("None");
    comboAppId.setModel(appIdComboBoxModel);
    comboAppId.setEnabled(true);

    if (this.projectSettings.isConfigured()) {
      setProjectConfiguration(projectSettings.getState());
    }

    if (this.applicationSettings.isConfigured()) {
      setApplicationConfiguration(applicationSettings.getStateWithPassword());
    }

    final UIConfiguration selectedItem = (UIConfiguration) scannerTypeComboBoxModel.getSelectedItem();
    showAuth(selectedItem.hasAuth());
    showNexusIQMode(selectedItem.hasAppId());

    initialiseSettingsPanel();
  }

  private ScannerTypeComboBoxModel getAvailableScanners() {
    ScannerTypeComboBoxModel model = new ScannerTypeComboBoxModel();
    ApplicationSettings.getScanners().forEach((k, v) -> model.addElement(v));
    return model;
  }

  private void showAuth(final boolean enabled) {
    lblUsername.setVisible(enabled);
    txtUsername.setVisible(enabled);
    lblPassword.setVisible(enabled);
    txtPassword.setVisible(enabled);
  }

  private void showNexusIQMode(final boolean enabled) {
    txtUrl.setVisible(enabled);
    lblUrl.setVisible(enabled);
    lblAppId.setVisible(enabled);
    comboAppId.setVisible(enabled);
  }

  private void initialiseSettingsPanel() {
    txtUsername.getEmptyText().setText("Enter username for more detailed vulnerability info");
    txtPassword.getEmptyText().setText("Enter password for more detailed vulnerability info");
    txtUrl.getEmptyText().setText("Provide Url to your Nexus IQ Server instance");
  }

  public JComponent getComponent() {
    return panel;
  }

  public ProjectConfiguration getProjectConfiguration() {
    final ProjectConfiguration configuration = new ProjectConfiguration();
    configuration.setApplicationId((String) this.appIdComboBoxModel.getSelectedItem());
    return configuration;
  }

  public void setProjectConfiguration(final ProjectConfiguration configuration) {
    final UIConfiguration selectedItem = scannerTypeComboBoxModel.getOrDefault();
    if (selectedItem.hasAppId()) {
      this.appIdComboBoxModel.setSelectedItem(configuration.getApplicationId());
    }
  }

  public ApplicationConfiguration getApplicationConfiguration() {
    final ApplicationConfiguration configuration = new ApplicationConfiguration();

    final UIConfiguration selectedItem = scannerTypeComboBoxModel.getOrDefault();
    configuration.setScannerConfigName(selectedItem.name());
    configuration.setUsername(txtUsername.getText());
    if (txtPassword.getPassword().length > 0) {
      configuration.setPassword(new String(txtPassword.getPassword()));
    }
    if (selectedItem.hasRemoteUrl()) {
      configuration.setServerUrl(txtUrl.getText());
    }
    return configuration;
  }

  public void setApplicationConfiguration(final ApplicationConfiguration configuration) {
    scannerTypeComboBoxModel
        .setSelectedItem(ApplicationSettings.getScannerConfigOrDefault(configuration.getScannerConfigName()));
    this.txtUsername.setText(configuration.getUsername());
    this.txtPassword.setText(configuration.getPassword());
  }
}

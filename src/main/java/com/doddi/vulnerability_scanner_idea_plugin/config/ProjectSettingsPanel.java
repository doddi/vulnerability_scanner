package com.doddi.vulnerability_scanner_idea_plugin.config;

import java.awt.event.ItemEvent;

import javax.swing.*;

import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerManagerService;
import com.doddi.vulnerability_scanner_idea_plugin.service.impl.DummyScannerServiceImpl;
import com.doddi.vulnerability_scanner_idea_plugin.service.impl.NexusIQScannerServiceImpl;
import com.doddi.vulnerability_scanner_idea_plugin.service.impl.OssIndexScannerServiceImpl;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.ui.components.JBPasswordField;
import com.intellij.ui.components.JBTextField;

public class ProjectSettingsPanel
{
  private final Project project;

  private final ProjectSettings projectSettings;

  private final ApplicationSettings applicationSettings;

  private final ScannerManagerService scannerManagerService;

  private JPanel panel;

  private ComboBox comboMode;

  private ScannerTypeComboBoxModel scannerTypeComboBoxModel = new ScannerTypeComboBoxModel();

  private ScannerTypeListCellRenderer scannerTypeListCellRenderer = new ScannerTypeListCellRenderer();

  private JBTextField txtUsername;

  private JBPasswordField txtPassword;

  private JBTextField txtUrl;

  private JLabel lblUrl;

  private ComboBox comboAppId;

  private JLabel lblAppId;

  private JLabel lblUsername;

  private JLabel lblPassword;

  private AppIdComboBoxModel appIdComboBoxModel = new AppIdComboBoxModel();

  public ProjectSettingsPanel(final Project project,
                              final ProjectSettings projectSettings,
                              final ApplicationSettings applicationSettings,
                              final ScannerManagerService scannerManagerService)
  {
    this.project = project;
    this.projectSettings = projectSettings;
    this.applicationSettings = applicationSettings;
    this.scannerManagerService = scannerManagerService;

    scannerManagerService.getAvailableScanners().forEach((name, clazz) -> scannerTypeComboBoxModel.addElement(name));
    comboMode.setModel(scannerTypeComboBoxModel);
    comboMode.setEnabled(true);

    comboMode.addItemListener(event -> {
      if (ItemEvent.SELECTED == event.getStateChange()) {
        final String selectedMode = (String) event.getItem();
        showNexusIQMode(NexusIQScannerServiceImpl.getRuntimeName().equals(selectedMode));
        showAuth(!DummyScannerServiceImpl.getRuntimeName().equals(selectedMode));
      }
    });

    appIdComboBoxModel.addElement("None");
    comboAppId.setModel(appIdComboBoxModel);
    comboAppId.setEnabled(true);

    if (this.projectSettings.isConfigured()) {
      setProjectConfiguration(projectSettings.getState());
    }

    if (this.applicationSettings.isConfigured()) {
      setApplicationConfiguration(applicationSettings.getStateWithPassword());
    }

    showAuth(true);
    showNexusIQMode(false);
    initialiseSettingsPanel();
  }

  private void showAuth(final boolean enabled) {
    lblUsername.setVisible(enabled);
    txtUsername.setVisible(enabled);
    lblPassword.setVisible(enabled);
    txtPassword.setVisible(enabled);
  }

  private void showNexusIQMode(final boolean enabled) {
    txtUrl.setVisible(enabled);
    lblUrl.setVisible(enabled);
    lblAppId.setVisible(enabled);
    comboAppId.setVisible(enabled);
  }

  private void initialiseSettingsPanel() {
    txtUsername.getEmptyText().setText("Enter username for more detailed vulnerability info");
    txtPassword.getEmptyText().setText("Enter password for more detailed vulnerability info");
    txtUrl.getEmptyText().setText("Provide Url to your Nexus IQ Server instance");
  }

  public JComponent getComponent() {
    return panel;
  }

  public ProjectConfiguration getProjectConfiguration() {
    final ProjectConfiguration configuration = new ProjectConfiguration();
    configuration.setApplicationId((String) this.appIdComboBoxModel.getSelectedItem());
    return configuration;
  }

  public void setProjectConfiguration(final ProjectConfiguration configuration) {
    final String selectedItem = scannerTypeComboBoxModel.getOrDefault();
    if (NexusIQScannerServiceImpl.getRuntimeName().equals(selectedItem)) {
      this.appIdComboBoxModel.setSelectedItem(configuration.getApplicationId());
    }
  }

  public ApplicationConfiguration getApplicationConfiguration() {
    final ApplicationConfiguration configuration = new ApplicationConfiguration();

    final String selectedItem = scannerTypeComboBoxModel.getOrDefault();
    configuration.setScannerType(selectedItem);
    configuration.setUsername(txtUsername.getText());
    if (txtPassword.getPassword().length > 0) {
      configuration.setPassword(new String(txtPassword.getPassword()));
    }
    if (NexusIQScannerServiceImpl.getRuntimeName().equals(selectedItem)) {
      configuration.setServerUrl(txtUrl.getText());
    }
    return configuration;
  }

  public void setApplicationConfiguration(final ApplicationConfiguration configuration) {
    if (configuration.getScannerType() == null) {
      scannerTypeComboBoxModel.setSelectedItem(OssIndexScannerServiceImpl.class);
    } else {
      scannerTypeComboBoxModel.setSelectedItem(configuration.getScannerType());
    }
    this.txtUsername.setText(configuration.getUsername());
    this.txtPassword.setText(configuration.getPassword());
  }
}

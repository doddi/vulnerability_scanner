package com.doddi.vulnerability_scanner_idea_plugin.config;

import javax.swing.*;

import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerManagerService;
import com.doddi.vulnerability_scanner_idea_plugin.util.PluginInformationProvider;
import com.google.common.base.Optional;
import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.Nls.Capitalization;
import org.jetbrains.annotations.Nullable;

public class ProjectConfigurable
    implements Configurable
{
  private final ProjectSettings projectSettings;

  private final ApplicationSettings applicationSettings;

  private final ScannerManagerService scannerManagerService;

  private Optional<ProjectSettingsPanel> projectSettingsPanel = Optional.absent();

  private Project project;

  private static final String pluginName = new PluginInformationProvider().getName();

  public ProjectConfigurable(final Project project) {
    this.project = project;
    projectSettings = ProjectSettings.getInstance(project);
    applicationSettings = ApplicationSettings.getInstance();
    scannerManagerService = ScannerManagerService.getInstance();
  }

  @Nls(capitalization = Capitalization.Title)
  @Override
  public String getDisplayName() {
    return pluginName;
  }

  @Nullable
  @Override
  public JComponent createComponent() {
    if (!projectSettingsPanel.isPresent()) {
      projectSettingsPanel = Optional.of(new ProjectSettingsPanel(project, projectSettings, applicationSettings, scannerManagerService));
    }
    return projectSettingsPanel.get().getComponent();
  }

  @Override
  public boolean isModified() {
    if (!projectSettingsPanel.isPresent()) {
      return false;
    }
    return !applicationSettings.getState().equals(projectSettingsPanel.get().getApplicationConfiguration()) ||
        !projectSettings.getState().equals(projectSettingsPanel.get().getProjectConfiguration());
  }

  @Override
  public void apply() throws ConfigurationException {
    if (projectSettingsPanel.isPresent()) {
      projectSettings.setConfiguration(projectSettingsPanel.get().getProjectConfiguration());
      applicationSettings.setConfiguration(projectSettingsPanel.get().getApplicationConfiguration());
    }
  }

  @Override
  public void reset() {
    if (projectSettingsPanel.isPresent()) {
      projectSettingsPanel.get().setProjectConfiguration(projectSettings.getState());
      projectSettingsPanel.get().setApplicationConfiguration(applicationSettings.getStateWithPassword());
    }
  }
}

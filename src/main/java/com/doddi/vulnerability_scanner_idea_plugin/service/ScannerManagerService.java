package com.doddi.vulnerability_scanner_idea_plugin.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.inject.Named;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;

public class ScannerManagerService
{
  public static final Logger LOGGER = Logger.getInstance(ScannerManagerService.class);

  private final Map<String, Class<? extends ScannerService>> scanners;

  public static ScannerManagerService getInstance() {
    return ServiceManager.getService(ScannerManagerService.class);
  }

  public ScannerManagerService() {
    scanners = doGetAvailableScanners();
  }

  private Map<String, Class<? extends ScannerService>> doGetAvailableScanners() {
    Map<String, Class<? extends ScannerService>> scanners = new HashMap<>();

    final Reflections reflections = new Reflections("com.doddi.vulnerability_scanner_idea_plugin.service.impl",
        new SubTypesScanner());
    final Set<Class<? extends ScannerService>> classes = reflections.getSubTypesOf(ScannerService.class);

    classes.forEach(clazz -> scanners.put(clazz.getAnnotation(Named.class).value(), clazz));
    return scanners;
  }

  public Map<String, Class<? extends ScannerService>> getAvailableScanners() {
    return scanners;
  }

  private ScannerService scannerInstance() {
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
    if (applicationSettings.getState() != null && applicationSettings.getState().getScannerType() != null) {
      String scannerType = applicationSettings.getState().getScannerType();
      final Class<? extends ScannerService> aClass = scanners.get(scannerType);
      return ServiceManager.getService(aClass);
    }

    throw new RuntimeException("Unable to create scanner!");
  }

  public String getCurrentScannerName() {
    return scannerInstance().getName();
  }

  public String getCurrentScannerLink() {
    return scannerInstance().getUrl();
  }

  public List<VulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
    return scannerInstance().scan(project, componentsToScan);
  }
}

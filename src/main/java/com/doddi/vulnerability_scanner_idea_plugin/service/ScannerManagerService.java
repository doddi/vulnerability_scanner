package com.doddi.vulnerability_scanner_idea_plugin.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.impl.OssIndexScannerServiceImpl;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import org.reflections.Reflections;
import org.reflections.scanners.SubTypesScanner;

public class ScannerManagerService
{
  public static final Logger LOGGER = Logger.getInstance(ScannerManagerService.class);

  private final List<Class<? extends ScannerService>> scanners;

  public static ScannerManagerService getInstance() {
    return ServiceManager.getService(ScannerManagerService.class);
  }

  public ScannerManagerService() {
    scanners = doGetAvailableScanners();
  }

  private List<Class<? extends ScannerService>> doGetAvailableScanners() {
    final Reflections reflections = new Reflections("com.doddi.vulnerability_scanner_idea_plugin.service.impl",
        new SubTypesScanner());
    final Set<Class<? extends ScannerService>> classes = reflections.getSubTypesOf(ScannerService.class);
    final List<Class<? extends ScannerService>> scanners = new ArrayList<>(classes);
    return scanners;
  }

  public List<Class<? extends ScannerService>> getAvailableScanners() {
    return scanners;
  }

  public ScannerService scannerInstance() {
    Class<? extends ScannerService> scannerType = OssIndexScannerServiceImpl.class;
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
    if (applicationSettings.getState() != null && applicationSettings.getState().getScannerType() != null) {
      scannerType = applicationSettings.getState().getScannerType();
    }

    return ServiceManager.getService(scannerType);
  }

  public List<VulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
    return scannerInstance().scan(project, componentsToScan);
  }
}

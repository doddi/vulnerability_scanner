package com.doddi.vulnerability_scanner_idea_plugin.service.impl;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.ossindex.service.api.componentreport.ComponentReport;
import org.sonatype.ossindex.service.client.OssindexClientConfiguration;
import org.sonatype.ossindex.service.client.internal.OssindexClientImpl;
import org.sonatype.ossindex.service.client.internal.VersionSupplier;
import org.sonatype.ossindex.service.client.marshal.GsonMarshaller;
import org.sonatype.ossindex.service.client.transport.HttpUrlConnectionTransport;
import org.sonatype.ossindex.service.client.transport.Transport;
import org.sonatype.ossindex.service.client.transport.UserAgentSupplier;

import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OssIndexScannerServiceImpl
    implements ScannerService
{
  public static final Logger LOGGER = LoggerFactory.getLogger(OssIndexScannerServiceImpl.class);

  private final OssindexClientImpl ossindexClient;

  public OssIndexScannerServiceImpl() {
    final VersionSupplier versionSupplier = new VersionSupplier();
    final UserAgentSupplier userAgentSupplier = new UserAgentSupplier(versionSupplier.get());
    OssindexClientConfiguration configuration = new OssindexClientConfiguration();
    Transport transport = new HttpUrlConnectionTransport(userAgentSupplier);

    ossindexClient = new OssindexClientImpl(configuration, transport, new GsonMarshaller());
  }

  @Override
  public List<VulnerableComponent> scan(final List<PackageUrl> componentsToScan) {
    try {
      LOGGER.info("Ossindex scan starting, checking for {} components", componentsToScan.size());

      final Map<PackageUrl, ComponentReport> componentReportMap = ossindexClient
          .requestComponentReports(componentsToScan);

      LOGGER.info("Ossindex scan complete");

      return componentReportMap.values().stream()
          .filter(this::isVulnerable)
          .map(this::createVulnerableComponent)
          .collect(Collectors.toList());
    }
    catch (Exception e) {
      LOGGER.error("Error fetching scan data from Ossindex", e);
    }
    return Collections.emptyList();
  }

  @Override
  public String getName() {
    return "Sonatype - OSS Index";
  }

  @Override
  public String getUrl() {
    return "https://ossindex.sonatype.org/";
  }

  private boolean isVulnerable(final ComponentReport componentReport) {
    return componentReport.getVulnerabilities().size() > 0;
  }

  @NotNull
  private VulnerableComponent createVulnerableComponent(final ComponentReport component) {
    LOGGER.debug("{} has {} vulnerabilities", component.getCoordinates().toString(), component.getVulnerabilities().size());

    final VulnerableComponent vulnerableComponent = new VulnerableComponent();
    vulnerableComponent.setPackageUrl(component.getCoordinates());
    vulnerableComponent.setVulnerabilities(component.getVulnerabilities());
    return vulnerableComponent;
  }
}

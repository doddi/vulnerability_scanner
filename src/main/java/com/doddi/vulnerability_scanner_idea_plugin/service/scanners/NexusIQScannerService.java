package com.doddi.vulnerability_scanner_idea_plugin.service.scanners;

import java.util.Collections;
import java.util.List;

import javax.inject.Named;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectSettings;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.ComponentSubmittedResponse;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.NexusIQClient;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.evaluation.EvaluationResults;
import com.intellij.openapi.project.Project;

@Named(NexusIQScannerService.NAME)
public class NexusIQScannerService
    implements ScannerService
{
  protected static final String NAME = "Sonatype - Nexus IQ";

  @Override
  public List<VulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
    final ApplicationConfiguration applicationConfiguration = applicationSettings.getStateWithPassword();
    final NexusIQClient client = new NexusIQClient(applicationConfiguration.getServerUrl(),
        applicationConfiguration.getUsername(), applicationConfiguration.getPassword());

    final ProjectSettings projectSettings = ProjectSettings.getInstance(project);
    final ProjectConfiguration projectConfiguration = projectSettings.getState();
    final String applicationId = projectConfiguration.getApplicationId();

    String internalId = client.getInternalAppId(applicationId);

    if (internalId != null) {
      ComponentSubmittedResponse response = client.submitComponents(internalId, componentsToScan);
      if (response != null) {
        EvaluationResults evaluationResults = client.fetchEvaluationResults(internalId, response.getResultId());

        // TODO Need to massage the returned data into generic informational data
        if (evaluationResults.getResults().length == 0) {
          return Collections.emptyList();
        }
      }
    }
    return Collections.emptyList();
  }

  @Override
  public String getName() {
    return NAME;
  }

  @Override
  public String getUrl() {
    return "https://www.sonatype.com";
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.ossindex;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.ossindex.service.api.componentreport.ComponentReport;
import org.sonatype.ossindex.service.client.OssindexClientConfiguration;
import org.sonatype.ossindex.service.client.internal.OssindexClientImpl;
import org.sonatype.ossindex.service.client.marshal.GsonMarshaller;
import org.sonatype.ossindex.service.client.transport.AuthConfiguration;
import org.sonatype.ossindex.service.client.transport.HttpUrlConnectionTransport;
import org.sonatype.ossindex.service.client.transport.Transport;
import org.sonatype.ossindex.service.client.transport.UserAgentSupplier;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.doddi.vulnerability_scanner_idea_plugin.util.PluginInformationProvider;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Named(OssIndexScannerService.NAME)
public class OssIndexScannerService
    implements ScannerService<OssIndexVulnerableComponent>
{
  public static final String NAME = "Sonatype - OSS Index";

  public static final Logger LOGGER = Logger.getInstance(OssIndexScannerService.class);

  private final OssindexClientImpl ossindexClient;

  public OssIndexScannerService() {
    final PluginInformationProvider pluginInformationProvider = ServiceManager
        .getService(PluginInformationProvider.class);

    final UserAgentSupplier userAgentSupplier = new UserAgentSupplier(pluginInformationProvider.getName(),
        pluginInformationProvider.getVersion());
    OssindexClientConfiguration configuration = new OssindexClientConfiguration();
    AuthConfiguration authConfig = maybeSetAuthConfiguration();
    configuration.setAuthConfiguration(authConfig);
    Transport transport = new HttpUrlConnectionTransport(userAgentSupplier);

    ossindexClient = new OssindexClientImpl(configuration, transport, new GsonMarshaller());
  }

  @Nullable
  public AuthConfiguration maybeSetAuthConfiguration() {
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();

    if (applicationSettings.useAuthentication()) {
      final ApplicationConfiguration config = applicationSettings.getStateWithPassword();
      return new AuthConfiguration(config.getUsername(), config.getPassword());
    }
    return null;
  }

  @Override
  public List<OssIndexVulnerableComponent> scan(final Project project,
                                                final List<PackageUrl> componentsToScan)
  {
    try {
      LOGGER.info(String.format("Ossindex scan starting, checking for %s components", componentsToScan.size()));

      final Map<PackageUrl, ComponentReport> componentReportMap = ossindexClient
          .requestComponentReports(componentsToScan);

      LOGGER.info("Ossindex scan complete");

      return componentReportMap.values().stream()
          .filter(this::isVulnerable)
          .map(this::createVulnerableComponent)
          .collect(Collectors.toList());
    }
    catch (Exception e) {
      LOGGER.error("Error fetching scan data from Ossindex", e);
    }
    return Collections.emptyList();
  }

  @Override
  public String getName() {
    return NAME;
  }

  @Override
  public String getUrl() {
    return "https://ossindex.sonatype.org/";
  }

  private boolean isVulnerable(final ComponentReport componentReport) {
    return componentReport.getVulnerabilities().size() > 0;
  }

  @NotNull
  private OssIndexVulnerableComponent createVulnerableComponent(final ComponentReport component) {
    LOGGER.debug("{} has {} vulnerabilities", component.getCoordinates().toString(),
        component.getVulnerabilities().size());

    final OssIndexVulnerableComponent vulnerableComponent = new OssIndexVulnerableComponent();
    vulnerableComponent.setPackageUrl(component.getCoordinates());
    vulnerableComponent.setReports(component.getVulnerabilities());
    return vulnerableComponent;
  }
}

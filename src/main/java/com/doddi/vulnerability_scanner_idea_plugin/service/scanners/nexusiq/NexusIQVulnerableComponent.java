package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import java.util.Arrays;
import java.util.Optional;

import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.ConstraintViolation;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.policy.PolicyViolation;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.security.SecurityData;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.security.SecurityIssue;

public class NexusIQVulnerableComponent
    extends VulnerableComponent<EvaluationResult>
{
  @Override
  public String buildPackageInformation(final String currentScannerName, final String currentScannerLink) {
    final StringBuffer stringBuffer = new StringBuffer();
    buildTitle(currentScannerName, currentScannerLink, stringBuffer);

    final EvaluationResult evaluationResult = this.getReports().get(0);
    final PolicyViolation[] policyViolations = evaluationResult.getPolicyData().getPolicyViolations();
    stringBuffer.append(String.format("\n\n<i>%s</i>: contains ", this.getPackageUrl().toString()));
    stringBuffer.append(String.format("<b>%d</b> ", policyViolations.length));
    stringBuffer.append(getPolicyString(policyViolations.length));
    stringBuffer.append("\n\n<ul>");

    for (PolicyViolation violation : policyViolations) {
      stringBuffer.append("<li>")
          .append(violation.getPolicyName())
          .append(": ")
          .append(displayConstraintsViolated(violation, evaluationResult.getSecurityData()));
      stringBuffer.append("</li>");
    }
    stringBuffer.append("</ul>");
    return stringBuffer.toString();
  }

  public String displayConstraintsViolated(final PolicyViolation violation,
                                           final SecurityData securityData)
  {
    StringBuffer stringBuffer = new StringBuffer();
    for (ConstraintViolation constraint : violation.getConstraintViolations()) {
      stringBuffer.append(constraint.getConstraintName());
      stringBuffer.append(maybeGetSecurityVulnerability(securityData, constraint));
      stringBuffer.append(", ");
    }
    return stringBuffer.substring(0, stringBuffer.length() - 2);
  }

  public String maybeGetSecurityVulnerability(final SecurityData securityData, final ConstraintViolation constraint) {
    if (constraint.getReasons()[0].getReason().startsWith("Found security vulnerability ")) {
      final String trimmedStart = constraint.getReasons()[0].getReason()
          .replace("Found security vulnerability ", "");
      final String[] split = trimmedStart.split(" ");

      final String security_ref = split[0];
      final Optional<SecurityIssue> securityIssue = Arrays.stream(securityData.getSecurityIssues())
          .filter(data -> data.getReference().equals(security_ref))
          .findFirst();

      if (securityIssue.isPresent()) {
        final String reason = constraint.getReasons()[0].getReason();
        return " - " +
            reason.replace(security_ref, "<a href=\"" + getUrl(securityIssue.get()) + "\">" + security_ref + "</a>");
      }
    }
    return "";
  }

  public String getUrl(final SecurityIssue securityIssue) {
    return securityIssue.getUrl() != null ? securityIssue.getUrl() : "www.sonatype.com";
  }

  private void buildTitle(String providerName, String provideUrl, StringBuffer stringBuffer) {
    stringBuffer.append("Vulnerability information Provided by: ");
    stringBuffer.append(buildLink(providerName, provideUrl));
  }

  private String buildLink(String title, String link) {
    return String.format("<a href=%s>%s</a>", link, title);
  }

  private String getPolicyString(int policies) {
    return policies == 1 ? "policy violation" : "policy violations";
  }

  @Override
  public int getSeverity() {
    int threatLevel = 0;
    final EvaluationResult evaluationResult = this.getReports().get(0);
    for (PolicyViolation result : evaluationResult.getPolicyData().getPolicyViolations()) {
      if (result.getThreatLevel() > threatLevel) {
        threatLevel = result.getThreatLevel();
      }
    }
    return threatLevel;
  }
}

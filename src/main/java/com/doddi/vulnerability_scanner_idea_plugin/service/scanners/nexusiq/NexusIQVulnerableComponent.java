package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import java.util.List;

import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;

public class NexusIQVulnerableComponent
    extends VulnerableComponent
{
  private List<NexusIQPolicyInformation> policyInformationList;

  @Override
  public String buildPackageInformation(final String currentScannerName, final String currentScannerLink) {
    final StringBuffer stringBuffer = new StringBuffer();
    buildTitle(currentScannerName, currentScannerLink, stringBuffer);

    stringBuffer.append(String.format("\n\n<i>%s</i>: contains ", this.getPackageUrl().toString()));
    stringBuffer.append(String.format("<b>%d</b> ", this.getPolicyInformationList().size()));
    stringBuffer.append(getPolicyString(this.getPolicyInformationList().size()));
    stringBuffer.append("\n\n<ul>");
    this.getPolicyInformationList().forEach(v -> {
      stringBuffer.append("<li>");
      stringBuffer.append(v.getPolicyName());
      stringBuffer.append("</li>");
    });
    stringBuffer.append("</ul>");
    return stringBuffer.toString();
  }

  private String getPolicyString(int policies) {
    return policies == 1 ? "policy violation" : "policy violations";
  }

  public void setPolicyInformation(final List<NexusIQPolicyInformation> policyInformationList) {
    this.policyInformationList = policyInformationList;
  }

  public List<NexusIQPolicyInformation> getPolicyInformationList() {
    return policyInformationList;
  }

  @Override
  public int getSeverity() {
    int threatLevel = 0;
    for (NexusIQPolicyInformation nexusIQPolicyInformation : policyInformationList) {
      if (nexusIQPolicyInformation.getThreatLevel() > threatLevel) {
        threatLevel = nexusIQPolicyInformation.getThreatLevel();
      }
    }
    return threatLevel;
  }
}

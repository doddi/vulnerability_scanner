package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.policy.PolicyViolation;

public class NexusIQVulnerableComponent
    extends VulnerableComponent<EvaluationResult>
{
  @Override
  public String buildPackageInformation(final String currentScannerName, final String currentScannerLink) {
    final StringBuffer stringBuffer = new StringBuffer();
    buildTitle(currentScannerName, currentScannerLink, stringBuffer);

    final EvaluationResult evaluationResult = this.getReports().get(0);
    final PolicyViolation[] policyViolations = evaluationResult.getPolicyData().getPolicyViolations();
    stringBuffer.append(String.format("\n\n<i>%s</i>: contains ", this.getPackageUrl().toString()));
    stringBuffer.append(String.format("<b>%d</b> ", policyViolations.length));
    stringBuffer.append(getPolicyString(policyViolations.length));
    stringBuffer.append("\n\n<ul>");
    for (PolicyViolation violation :
        policyViolations) {
      stringBuffer.append("<li>");
      stringBuffer.append(violation.getPolicyName());
      stringBuffer.append("</li>");
    }
    stringBuffer.append("</ul>");
    return stringBuffer.toString();
  }

  protected void buildTitle(String providerName, String provideUrl, StringBuffer stringBuffer) {
    stringBuffer.append("Vulnerability information Provided by: ");
    stringBuffer.append(buildLink(providerName, provideUrl));
  }

  protected String buildLink(String title, String link) {
    return String.format("<a href=%s>%s</a>", link, title);
  }

  private String getPolicyString(int policies) {
    return policies == 1 ? "policy violation" : "policy violations";
  }

  @Override
  public int getSeverity() {
    int threatLevel = 0;
    final EvaluationResult evaluationResult = this.getReports().get(0);
    for (PolicyViolation result : evaluationResult.getPolicyData().getPolicyViolations()) {
      if (result.getThreatLevel() > threatLevel) {
        threatLevel = result.getThreatLevel();
      }
    }
    return threatLevel;
  }
}

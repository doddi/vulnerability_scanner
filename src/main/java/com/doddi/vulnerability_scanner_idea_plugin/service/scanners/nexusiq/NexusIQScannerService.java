package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectSettings;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.ComponentSubmittedResponse;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.NexusIQClient;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResults;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableList;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Named(NexusIQScannerService.NAME)
public class NexusIQScannerService
    implements ScannerService<NexusIQVulnerableComponent>
{
  protected static final String NAME = "Sonatype - Nexus IQ";

  @Override
  public List<NexusIQVulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
    final ApplicationConfiguration applicationConfiguration = applicationSettings.getStateWithPassword();
    final NexusIQClient client = new NexusIQClient(applicationConfiguration.getServerUrl(),
        applicationConfiguration.getUsername(), applicationConfiguration.getPassword());

    final ProjectSettings projectSettings = ProjectSettings.getInstance(project);
    final ProjectConfiguration projectConfiguration = projectSettings.getState();
    final String applicationId = projectConfiguration.getApplicationId();

    String internalId = client.getInternalAppId(applicationId);

    if (internalId != null) {
      ComponentSubmittedResponse response = client.submitComponents(internalId, componentsToScan);
      if (response != null) {
        EvaluationResults evaluationResults = client.fetchEvaluationResults(internalId, response.getResultId());

        return getVulnerableComponents(evaluationResults);
      }
    }
    return Collections.emptyList();
  }

  @NotNull
  @VisibleForTesting
  public List<NexusIQVulnerableComponent> getVulnerableComponents(final EvaluationResults evaluationResults) {
    return Arrays.stream(evaluationResults.getResults())
        .map(this::getVulnerableComponent)
        .filter(Objects::nonNull)
        .collect(Collectors.toList());
  }

  @Nullable
  private NexusIQVulnerableComponent getVulnerableComponent(final EvaluationResult result) {
    final NexusIQVulnerableComponent vulnerableComponent = new NexusIQVulnerableComponent();

    vulnerableComponent.setPackageUrl(PackageUrl.parse(result.getComponent().getPackageUrl()));
    vulnerableComponent.setReports(ImmutableList.of(result));
    if (vulnerableComponent.getReports().get(0).getPolicyData().getPolicyViolations().length == 0) {
      return null;
    }
    return vulnerableComponent;
  }

  @Override
  public String getName() {
    return NAME;
  }

  @Override
  public String getUrl() {
    return "https://www.sonatype.com";
  }
}

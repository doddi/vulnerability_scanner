package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.ossindex.service.api.componentreport.ComponentReportVulnerability;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectSettings;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.ComponentSubmittedResponse;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.NexusIQClient;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.evaluation.EvaluationResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.evaluation.EvaluationResults;
import com.doddi.vulnerability_scanner_idea_plugin.util.NexusIQClient.evaluation.security.SecurityIssue;
import com.intellij.openapi.project.Project;

@Named(NexusIQScannerService.NAME)
public class NexusIQScannerService
    implements ScannerService
{
  protected static final String NAME = "Sonatype - Nexus IQ";

  @Override
  public List<VulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
    final ApplicationConfiguration applicationConfiguration = applicationSettings.getStateWithPassword();
    final NexusIQClient client = new NexusIQClient(applicationConfiguration.getServerUrl(),
        applicationConfiguration.getUsername(), applicationConfiguration.getPassword());

    final ProjectSettings projectSettings = ProjectSettings.getInstance(project);
    final ProjectConfiguration projectConfiguration = projectSettings.getState();
    final String applicationId = projectConfiguration.getApplicationId();

    String internalId = client.getInternalAppId(applicationId);

    if (internalId != null) {
      ComponentSubmittedResponse response = client.submitComponents(internalId, componentsToScan);
      if (response != null) {
        EvaluationResults evaluationResults = client.fetchEvaluationResults(internalId, response.getResultId());

        return Arrays.stream(evaluationResults.getResults())
            .map(this::getVulnerableComponent)
            .filter(Objects::nonNull)
            .collect(Collectors.toList());
      }
    }
    return Collections.emptyList();
  }

  private VulnerableComponent getVulnerableComponent(final EvaluationResult result) {
    final VulnerableComponent vulnerableComponent = new VulnerableComponent();
    vulnerableComponent.setPackageUrl(PackageUrl.parse(result.getComponent().getPackageUrl()));
    List<ComponentReportVulnerability> vulnerabilities = Arrays.stream(result.getSecurityData().getSecurityIssues())
        .map(this::getVulnerability)
        .collect(Collectors.toList());
    if (vulnerabilities.size() == 0) {
      return null;
    }
    vulnerableComponent.setVulnerabilities(vulnerabilities);
    return vulnerableComponent;
  }

  private ComponentReportVulnerability getVulnerability(final SecurityIssue issue) {
    final ComponentReportVulnerability vulnerability = new ComponentReportVulnerability();
    if (issue.getUrl() != null) {
      vulnerability.setReference(URI.create(issue.getUrl()));
    }
    else {
      vulnerability.setReference(URI.create("www.sonatype.com"));
    }
    vulnerability.setTitle(issue.getReference());
    return vulnerability;
  }

  @Override
  public String getName() {
    return NAME;
  }

  @Override
  public String getUrl() {
    return "https://www.sonatype.com";
  }
}

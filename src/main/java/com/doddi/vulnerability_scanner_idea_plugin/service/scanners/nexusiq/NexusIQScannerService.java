package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.inject.Named;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ApplicationSettings;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectConfiguration;
import com.doddi.vulnerability_scanner_idea_plugin.config.ProjectSettings;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerService;
import com.doddi.vulnerability_scanner_idea_plugin.util.PluginInformationProvider;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.Component;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.NexusIQClient;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.component.ComponentDetail;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.component.ComponentDetailsResponse;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.ApplicationEvaluationResponse;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.ConstraintReason;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.ConstraintViolation;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResults;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.policy.PolicyData;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.policy.PolicyViolation;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository.ComponentEvalResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository.ComponentFact;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository.ConditionFact;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository.ConstraintFact;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository.PolicyAlert;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository.RepositoryEvaluationResponse;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.remediation.RemediationResponse;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableList;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Named(NexusIQScannerService.NAME)
public class NexusIQScannerService
    implements ScannerService<NexusIQVulnerableComponent>
{
  protected static final String NAME = "Sonatype - Nexus IQ";

  private static final PluginInformationProvider pluginInfo = ServiceManager
      .getService(PluginInformationProvider.class);

  @Override
  public List<NexusIQVulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
    final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
    final ApplicationConfiguration applicationConfiguration = applicationSettings.getStateWithPassword();
    final NexusIQClient client = new NexusIQClient(applicationConfiguration.getServerUrl(),
        applicationConfiguration.getUsername(), applicationConfiguration.getPassword());

    final ProjectSettings projectSettings = ProjectSettings.getInstance(project);
    final ProjectConfiguration projectConfiguration = projectSettings.getState();
    final String applicationId = projectConfiguration.getApplicationId();

    String internalId = null;
    if (!applicationId.equals("None")) {
      internalId = client.getInternalAppId(applicationId);
    }

    if (internalId != null) {
      final List<NexusIQVulnerableComponent> vulnerableComponents = evaluateByApplication(project, componentsToScan,
          client,
          internalId);
      if (vulnerableComponents != null) {
        return vulnerableComponents;
      }
    }
    else {
      return evaluateByRepository(componentsToScan, client, project.getName());
    }
    return Collections.emptyList();
  }

  @Nullable
  public List<NexusIQVulnerableComponent> evaluateByApplication(final Project project,
                                                                final List<PackageUrl> componentsToScan,
                                                                final NexusIQClient client,
                                                                final String internalId)
  {
    ApplicationEvaluationResponse response = client.evaluateComponentsAgainstApplication(internalId, componentsToScan);
    if (response != null) {
      EvaluationResults evaluationResults = client
          .fetchApplicationEvaluationResults(internalId, response.getResultId());

      if (evaluationResults != null) {
        final List<NexusIQVulnerableComponent> vulnerableComponents = getVulnerableComponents(evaluationResults);

        new Task.Backgroundable(project, "Remediation")
        {
          @Override
          public void run(@NotNull final ProgressIndicator indicator) {
            final ApplicationSettings applicationSettings = ApplicationSettings.getInstance();
            final ApplicationConfiguration applicationConfiguration = applicationSettings.getStateWithPassword();
            final NexusIQClient client = new NexusIQClient(applicationConfiguration.getServerUrl(),
                applicationConfiguration.getUsername(), applicationConfiguration.getPassword());

            fetchRemediation(client, internalId, vulnerableComponents);
          }
        }.queue();
        return vulnerableComponents;
      }
    }
    return null;
  }

  @NotNull
  public List<NexusIQVulnerableComponent> evaluateByRepository(final List<PackageUrl> componentsToScan,
                                                               final NexusIQClient client,
                                                               final @NotNull String projectName)
  {
    ComponentDetailsResponse componentDetailsResponse = client.fetchComponentDetails(componentsToScan);
    final List<ComponentDetail> componentDetails = componentDetailsResponse.getComponentDetails();
    final List<Component> components = componentDetails.stream()
        .map(ComponentDetail::getComponent)
        .collect(Collectors.toList());

    final RepositoryEvaluationResponse response = client
        .evaluateComponentsAgainstRepository(pluginInfo.getName(), projectName, components);

    List<NexusIQVulnerableComponent> vulnerableComponents = new ArrayList<>();

    for (ComponentEvalResult componentEvalResult : response.getComponentEvalResults()) {
      final NexusIQVulnerableComponent vulnerableComponent = new NexusIQVulnerableComponent();
      vulnerableComponent.setPackageUrl(componentsToScan.get(componentEvalResult.getRequestIndex()));
      vulnerableComponent.setReports(convertPolicyAlertToEvaluationReport(componentEvalResult));
      vulnerableComponents.add(vulnerableComponent);
    }
    return vulnerableComponents;
  }

  private List<EvaluationResult> convertPolicyAlertToEvaluationReport(final ComponentEvalResult componentEvalResult) {
    List<EvaluationResult> evaluationResults = new ArrayList<>();
    final EvaluationResult evaluationResult = new EvaluationResult();

    final PolicyData policyData = new PolicyData();
    List<PolicyViolation> policyViolations = new ArrayList<>();
    for (PolicyAlert policyAlert : componentEvalResult.getPolicyAlerts()) {
      final PolicyViolation policyViolation = new PolicyViolation();
      policyViolation.setPolicyName(policyAlert.getTrigger().getPolicyName());
      policyViolation.setPolicyId(policyAlert.getTrigger().getPolicyId());
      policyViolation.setThreatLevel(policyAlert.getTrigger().getThreatLevel());
      policyViolation
          .setConstraintViolations(convertComponentFactToConstraint(policyAlert.getTrigger().getComponentFacts()));

      policyViolations.add(policyViolation);
    }
    policyData.setPolicyViolations(policyViolations.stream().toArray(PolicyViolation[]::new));

    evaluationResult.setPolicyData(policyData);
    evaluationResults.add(evaluationResult);

    return evaluationResults;
  }

  private ConstraintViolation[] convertComponentFactToConstraint(final ComponentFact[] componentFacts) {
    List<ConstraintViolation> constraintViolations = new ArrayList<>();

    for (ComponentFact componentFact : componentFacts) {
      for (ConstraintFact constraintFact : componentFact.getConstraintFacts()) {
        final ConstraintViolation constraintViolation = new ConstraintViolation();
        constraintViolation.setConstraintName(constraintFact.getConstraintName());

        List<ConstraintReason> constraintReasons = new ArrayList<>();
        for (ConditionFact conditionFact : constraintFact.getConditionFacts()) {
          final ConstraintReason constraintReason = new ConstraintReason();
          constraintReason.setReason(conditionFact.getReason());
          constraintReasons.add(constraintReason);
        }

        ConstraintReason[] reasons = new ConstraintReason[constraintReasons.size()];
        reasons = constraintReasons.toArray(reasons);
        constraintViolation.setReasons(reasons);
        constraintViolations.add(constraintViolation);
      }
    }

    ConstraintViolation[] violations = new ConstraintViolation[constraintViolations.size()];
    violations = constraintViolations.toArray(violations);
    return violations;
  }

  private void fetchRemediation(final NexusIQClient client,
                                final String internalId,
                                final List<NexusIQVulnerableComponent> vulnerableComponents)
  {
    vulnerableComponents.forEach(component -> {
      final RemediationResponse remediation = client
          .fetchComponentRemediation(internalId, component.getPackageUrl());
      component.setRemediation(remediation);
    });
  }

  @NotNull
  @VisibleForTesting
  public List<NexusIQVulnerableComponent> getVulnerableComponents(final EvaluationResults evaluationResults) {
    return Arrays.stream(evaluationResults.getResults())
        .map(this::getVulnerableComponent)
        .filter(Objects::nonNull)
        .collect(Collectors.toList());
  }

  @Nullable
  private NexusIQVulnerableComponent getVulnerableComponent(final EvaluationResult result) {
    final NexusIQVulnerableComponent vulnerableComponent = new NexusIQVulnerableComponent();

    vulnerableComponent.setPackageUrl(PackageUrl.parse(result.getComponent().getPackageUrl()));
    vulnerableComponent.setReports(ImmutableList.of(result));
    if (vulnerableComponent.getReports().get(0).getPolicyData().getPolicyViolations().length == 0) {
      return null;
    }

    return vulnerableComponent;
  }

  @Override
  public String getName() {
    return NAME;
  }

  @Override
  public String getUrl() {
    return "https://www.sonatype.com";
  }
}

package org.sonatype.vul_highlighter.listener.rust;

import java.util.List;
import java.util.Set;

import org.sonatype.vul_highlighter.listener.ProjectTypeDetector;
import org.sonatype.vul_highlighter.module.LibraryToScan;
import org.sonatype.vul_highlighter.service.VulnerabilityService;

import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleType;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.openapi.vfs.newvfs.BulkFileListener;
import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileEvent;
import org.jetbrains.annotations.NotNull;

public class RustTypeDetector implements ProjectTypeDetector
{
  public static final String RUST_TYPE = "Rust";

  @Override
  public boolean detect(final Module module) {
    return RUST_TYPE.equals(ModuleType.get(module).getName());
  }

  @Override
  public void start(final Project project) {
  project.getMessageBus().connect().subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener() {
    @Override
    public void after(@NotNull final List<? extends VFileEvent> events) {
      for (VFileEvent event : events) {
        if (event.getFile().getPresentableUrl().equals(project.getPresentableUrl() + "/Cargo.lock") && event instanceof VFileContentChangeEvent) {
          final Set<LibraryToScan> dependencies = new TomlReader()
              .getDependencies(project.getPresentableUrl() + "/Cargo.lock");

          final VulnerabilityService vulnerabilityService = VulnerabilityService.getInstance();
          vulnerabilityService.checkLibraries(dependencies);
        }
      }
    }
  });
  }
}

package org.sonatype.vul_highlighter.listener.rust;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Set;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.vul_highlighter.module.LibraryToScan;

import com.github.jezza.Toml;
import com.github.jezza.TomlArray;
import com.github.jezza.TomlTable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TomlReader
{
  public static final Logger LOGGER = LoggerFactory.getLogger(TomlReader.class);

  Set<LibraryToScan> getDependencies(final String fileName) {
    final File file = new File(fileName);

    try (final FileInputStream fileInputStream = new FileInputStream(file)) {
      final TomlTable tomlTable = Toml.from(fileInputStream);
      final Object packages = tomlTable.get("package");

      if (packages instanceof TomlArray) {
        final TomlArray packageArray = (TomlArray) packages;

        return packageArray.stream()
            .filter(dep -> dep instanceof TomlTable)
            .map(dep -> ((TomlTable) dep))
            .map(tomTable -> getPackageUrl(tomTable))
            .map(packageUrl -> new LibraryToScan(packageUrl, null))
            .collect(Collectors.toSet());
      }
    }
    catch (IOException e) {
      e.printStackTrace();
    }

    return Collections.emptySet();
  }

  private PackageUrl getPackageUrl(final TomlTable tomlTable) {
    return PackageUrl.builder()
        .type("cargo")
        .name((String) tomlTable.get("name"))
        .version((String) tomlTable.get("version"))
        .build();
  }
}

package org.sonatype.vul_highlighter.listener.rust;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.sonatype.vul_highlighter.listener.Populator;
import org.sonatype.vul_highlighter.module.LibraryToScan;
import org.sonatype.vul_highlighter.module.VulnerableComponent;

public class RustPopulator
    implements Populator
{
  private final Map<String, VulnerableComponent> components = new HashMap<>();

  @Override
  public void populate(final Set<LibraryToScan> libraries, final List<VulnerableComponent> vulnerableComponents) {
    components.clear();
    vulnerableComponents.forEach(component -> components.put(component.getPackageUrl().toString(), component));
  }

  @Override
  public Map<String, VulnerableComponent> getVulnerableComponents() {
    return components;
  }

  @Override
  public Optional<VulnerableComponent> isVulnerable(final String name) {
    return components.values().stream()
        .filter(vulnerableComponent -> vulnerableComponent.getPackageUrl().getName().equals(name))
        .findFirst();
  }
}

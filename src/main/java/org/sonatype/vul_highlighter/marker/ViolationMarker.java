package org.sonatype.vul_highlighter.marker;

import java.util.Optional;

import javax.swing.*;

import org.sonatype.vul_highlighter.module.VulnerableComponent;

import com.intellij.codeInsight.daemon.GutterIconNavigationHandler;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.codeInsight.daemon.LineMarkerProviderDescriptor;
import com.intellij.openapi.editor.markup.GutterIconRenderer;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


public abstract class ViolationMarker
    extends LineMarkerProviderDescriptor
{
  private static final GutterIconNavigationHandler<PsiElement> ALERT_HANDLER = (e, elt) -> {};

  @Override
  public String getName() {
    return "Policy Violation";
  }

  public abstract LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element);

  @NotNull
  private String buildVulnerabilityMessage(final VulnerableComponent vulnerable) {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(vulnerable.getPackageUrl().toString());
    stringBuffer.append(": contains ");
    stringBuffer.append(vulnerable.getVulnerabilities().size());
    stringBuffer.append(" vulnerabilities");
    stringBuffer.append("\n");
    vulnerable.getVulnerabilities().forEach(v -> {
      stringBuffer.append(v.getReference().toString());
      stringBuffer.append("\n");
    });
    return stringBuffer.toString();
  }


  @NotNull
  protected LineMarkerInfo markVulnerable(@NotNull final PsiElement element,
                                        final Optional<VulnerableComponent> vulnerable)
  {
    return new LineMarkerInfo<>(element, element.getTextRange(), ViolationIcons.ALERT,
        __ -> vulnerable.map(this::buildVulnerabilityMessage).orElse("Unable to find vulnerabilities"),
        ALERT_HANDLER,
        GutterIconRenderer.Alignment.RIGHT);
  }

  @Nullable
  @Override
  public Icon getIcon() {
    return ViolationIcons.ALERT;
  }
}

package org.sonatype.vul_highlighter.marker;


import java.util.Optional;

import javax.swing.Icon;

import org.sonatype.vul_highlighter.module.VulnerableComponent;
import org.sonatype.vul_highlighter.service.VulnerabilityService;

import com.intellij.codeInsight.daemon.GutterIconNavigationHandler;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.codeInsight.daemon.LineMarkerProviderDescriptor;
import com.intellij.openapi.editor.markup.GutterIconRenderer;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiJavaCodeReferenceElement;
import com.intellij.psi.impl.source.PsiImportStatementImpl;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class JavaViolation
    extends LineMarkerProviderDescriptor
{
  public static final Logger LOGGER = LoggerFactory.getLogger(JavaViolation.class);

  private static final GutterIconNavigationHandler<PsiElement> ALERT_HANDLER = (e, elt) -> {};

  @Override
  public String getName() {
    return "Policy Violation";
  }

  @Nullable
  @Override
  public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element) {
    if (element instanceof PsiImportStatementImpl) {
      final PsiJavaCodeReferenceElement importReference = ((PsiImportStatementImpl) element).getImportReference();

      if(importReference != null) {
        final Optional<VulnerableComponent> vulnerable = VulnerabilityService.getInstance()
            .isVulnerable(importReference.getQualifiedName());

        if (vulnerable.isPresent()) {
          LOGGER.info("Vulnerabilities found for {}", importReference.getQualifiedName());
          return new LineMarkerInfo<>(element, element.getTextRange(), ViolationIcons.ALERT,
              __ -> vulnerable.map(this::buildVulnerabilityMessage).orElse("Unable to find vulnerabilities"),
              ALERT_HANDLER,
              GutterIconRenderer.Alignment.RIGHT);
        }
      }
    }
    return null;
  }

  @NotNull
  private String buildVulnerabilityMessage(final VulnerableComponent vulnerable) {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(vulnerable.getPackageUrl().toString());
    stringBuffer.append(": contains ");
    stringBuffer.append(vulnerable.getVulnerabilities().size());
    stringBuffer.append(" vulnerabilities");
    stringBuffer.append("\n");
    vulnerable.getVulnerabilities().forEach(v -> {
      stringBuffer.append(v.getReference().toString());
      stringBuffer.append("\n");
    });
    return stringBuffer.toString();
  }

  @Nullable
  @Override
  public Icon getIcon() {
    return ViolationIcons.ALERT;
  }
}

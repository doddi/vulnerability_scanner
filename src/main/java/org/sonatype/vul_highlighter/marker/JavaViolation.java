package org.sonatype.vul_highlighter.marker;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;

import javax.swing.*;

import com.intellij.codeInsight.daemon.GutterIconNavigationHandler;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.codeInsight.daemon.LineMarkerProviderDescriptor;
import com.intellij.openapi.editor.markup.GutterIconRenderer;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.roots.ProjectFileIndex;
import com.intellij.openapi.roots.ProjectRootManager;
import com.intellij.openapi.roots.impl.ProjectFileIndexImpl;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.PsiClass;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiJavaCodeReferenceElement;
import com.intellij.psi.PsiPackage;
import com.intellij.psi.impl.source.PsiImportStatementImpl;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.idea.maven.importing.MavenImporter;
import org.jetbrains.idea.maven.importing.MavenPomPathModuleService;
import org.jetbrains.idea.maven.model.MavenArtifact;
import org.jetbrains.idea.maven.model.MavenArtifactNode;
import org.jetbrains.idea.maven.project.MavenProject;
import org.jetbrains.idea.maven.project.MavenProjectsManager;


public class JavaViolation
    extends LineMarkerProviderDescriptor
{
  private static final GutterIconNavigationHandler<PsiElement> ALERT_HANDLER = (e, elt) -> { };

  public JavaViolation() {
    super();


  }

  @Override
  public String getName() {
    return "Policy Violation";
  }

  @Nullable
  @Override
  public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element) {
    return null;

    /*
    if (element instanceof PsiClass) {
      System.out.println(element.getClass());
    }

    if (element instanceof PsiImportStatementImpl) {
      final PsiJavaCodeReferenceElement importReference = ((PsiImportStatementImpl) element).getImportReference();

      // TODO Find component in the project
      // Leaves:
      // com.fasterxml.jackson.core:jackson-core:jar:2.11.0->() -> {MavenArtifactNode@25155} "com.fasterxml.jackson.core:jackson-core:jar:2.11.0->()"
      // commons-cli:commons-cli:jar:1.4->() -> {MavenArtifactNode@25157} "commons-cli:commons-cli:jar:1.4->()"
      // com.beust:jcommander:jar:1.78->() -> {MavenArtifactNode@25159} "com.beust:jcommander:jar:1.78->()"
      final Map<String, MavenArtifactNode> components = findComponents(element.getProject());

      // TODO Later - Hit OSSIndex to get any violations

      // -------------------
      /* TODO For each import check for an entry in the component list
          or
          For all packages in a component check if the import exists (1)
      */
      // PsiJavaCodeReferenceElement:com.beust.jcommander.JCommander

    /*
      final ModuleManager moduleManager = ModuleManager.getInstance(element.getProject());
      final Module[] modules = moduleManager.getModules();

      final List<String> libraryNames = new ArrayList<String>();
      ModuleRootManager.getInstance(modules[0]).orderEntries().forEachLibrary(library -> {
        libraryNames.add(library.getName());
        return true;
      });
      Messages.showInfoMessage(StringUtil.join(libraryNames, "\n"), "Libraries in Module");


      final Optional<Entry<String, MavenArtifactNode>> optionalEntry = components.entrySet().stream()
          .filter(e -> {
            final MavenArtifact artifact = e.getValue().getArtifact();
            return importReference.getCanonicalText().contains(artifact.getGroupId());
          })
          .findFirst();

      if (optionalEntry.isPresent()) {
        return new LineMarkerInfo<>(element, element.getTextRange(), ViolationIcons.ALERT, __ -> "Policy Violation Detected",
            ALERT_HANDLER,
            GutterIconRenderer.Alignment.RIGHT);
      }
    }
    return null;
    
     */
  }

  @Nullable
  @Override
  public Icon getIcon() {
    return ViolationIcons.ALERT;
  }

  private Map<String, MavenArtifactNode> findComponents(final Project project) {
    final MavenProjectsManager mavenProjectsManager = MavenProjectsManager.getInstance(project);
    Module[] modules = ModuleManager.getInstance(project).getModules();

    final HashMap<String, MavenArtifactNode> components = new HashMap<>();
    for (Module module : modules) {
      assert mavenProjectsManager.isMavenizedModule(module);

      final MavenProject mavenProject = mavenProjectsManager.findProject(module);
      final List<MavenArtifactNode> dependencyTree = mavenProject.getDependencyTree();

      for (MavenArtifactNode node : dependencyTree) {
        components.put(node.toString(), node);
      }
    }

    return components;
  }
}

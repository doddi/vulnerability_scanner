package org.sonatype.vul_highlighter.marker;


import javax.swing.*;

import org.sonatype.vul_highlighter.service.VulnerabilityService;

import com.intellij.codeInsight.daemon.GutterIconNavigationHandler;
import com.intellij.codeInsight.daemon.LineMarkerInfo;
import com.intellij.codeInsight.daemon.LineMarkerProviderDescriptor;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.editor.markup.GutterIconRenderer;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiJavaCodeReferenceElement;
import com.intellij.psi.impl.source.PsiImportStatementImpl;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


public class JavaViolation
    extends LineMarkerProviderDescriptor
{
  private static final GutterIconNavigationHandler<PsiElement> ALERT_HANDLER = (e, elt) -> { };

  private final VulnerabilityService vulnerabilityService;

  public JavaViolation() {
    super();
    vulnerabilityService = ServiceManager.getService(VulnerabilityService.class);
  }

  @Override
  public String getName() {
    return "Policy Violation";
  }

  @Nullable
  @Override
  public LineMarkerInfo getLineMarkerInfo(@NotNull final PsiElement element) {
    if (element instanceof PsiImportStatementImpl) {
      final PsiJavaCodeReferenceElement importReference = ((PsiImportStatementImpl) element).getImportReference();

      if (vulnerabilityService.isVulnerable(importReference.getQualifiedName())) {
        return new LineMarkerInfo<>(element, element.getTextRange(), ViolationIcons.ALERT, __ -> "Policy Violation Detected",
            ALERT_HANDLER,
            GutterIconRenderer.Alignment.RIGHT);
      }
    }
    return null;
  }

  @Nullable
  @Override
  public Icon getIcon() {
    return ViolationIcons.ALERT;
  }
}

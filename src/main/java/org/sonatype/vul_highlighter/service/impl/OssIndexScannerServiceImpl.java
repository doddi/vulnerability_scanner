package org.sonatype.vul_highlighter.service.impl;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.ossindex.service.api.componentreport.ComponentReport;
import org.sonatype.ossindex.service.client.OssindexClientConfiguration;
import org.sonatype.ossindex.service.client.internal.OssindexClientImpl;
import org.sonatype.ossindex.service.client.internal.VersionSupplier;
import org.sonatype.ossindex.service.client.marshal.GsonMarshaller;
import org.sonatype.ossindex.service.client.transport.HttpUrlConnectionTransport;
import org.sonatype.ossindex.service.client.transport.Transport;
import org.sonatype.ossindex.service.client.transport.UserAgentSupplier;
import org.sonatype.vul_highlighter.module.VulnerableComponent;
import org.sonatype.vul_highlighter.service.ScannerService;

public class OssIndexScannerServiceImpl
    implements ScannerService
{
  private final OssindexClientConfiguration configuration;

  private final Transport transport;

  private final OssindexClientImpl ossindexClient;

  public OssIndexScannerServiceImpl() {
    final VersionSupplier versionSupplier = new VersionSupplier();
    final UserAgentSupplier userAgentSupplier = new UserAgentSupplier(versionSupplier.get());
    configuration = new OssindexClientConfiguration();
    transport = new HttpUrlConnectionTransport(userAgentSupplier);

    ossindexClient = new OssindexClientImpl(configuration, transport, new GsonMarshaller());
  }

  @Override
  public List<VulnerableComponent> scan(final List<PackageUrl> componentsToScan) {

    try {
      final Map<PackageUrl, ComponentReport> componentReportMap = ossindexClient
          .requestComponentReports(componentsToScan);

      return componentReportMap.values().stream()
          .filter(componentReport -> componentReport.getVulnerabilities().size() > 0)
          .map( component -> {
            final VulnerableComponent vulnerableComponent = new VulnerableComponent();
            vulnerableComponent.setPackageUrl(component.getCoordinates());
            vulnerableComponent.setVulnerabilities(component.getVulnerabilities());
            return vulnerableComponent;
          })
          .collect(Collectors.toList());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return Collections.emptyList();
  }
}

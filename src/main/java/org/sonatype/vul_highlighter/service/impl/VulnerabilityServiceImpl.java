package org.sonatype.vul_highlighter.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.vul_highlighter.module.JarParser;
import org.sonatype.vul_highlighter.module.VulnerableComponent;
import org.sonatype.vul_highlighter.service.ScannerService;
import org.sonatype.vul_highlighter.service.VulnerabilityService;

import org.jetbrains.idea.maven.model.MavenArtifact;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VulnerabilityServiceImpl
    implements VulnerabilityService
{
  public static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityServiceImpl.class);

  private final Map<String, VulnerableComponent> components = new HashMap<>();

  @Override
  public void scan(final List<MavenArtifact> artifacts) {
    final List<PackageUrl> componentsToScan = convertToPackageUrl(artifacts);
    final ScannerService service = ScannerService.getInstance();

    final List<VulnerableComponent> vulnerableComponents = service.scan(componentsToScan);
    populateComponentClassNames(artifacts, vulnerableComponents);
    populateVulnerableComponents(vulnerableComponents);
  }

  private void populateComponentClassNames(final List<MavenArtifact> artifacts,
                                           final List<VulnerableComponent> vulnerableComponents)
  {
    vulnerableComponents.forEach(vulnerableComponent -> artifacts.stream()
        .filter(artifact -> getPackageUrl(artifact).equals(vulnerableComponent.getPackageUrl()))
        .findFirst()
        .ifPresent(a -> {
          vulnerableComponent.setFile(a.getFile());
          JarParser.findClasses(vulnerableComponent);
        }));
  }

  private void populateVulnerableComponents(final List<VulnerableComponent> vulnerableComponents) {
    components.clear();
    vulnerableComponents.forEach(component -> components.put(component.getPackageUrl().toString(), component));
  }

  @Override
  public Optional<VulnerableComponent> isVulnerable(final String name) {
    return components.values().stream()
        .filter(component -> component.getClasses().contains(name))
        .findFirst();
  }

  @Override
  public Map<String, VulnerableComponent> getVulnerableComponents() {
    return this.components;
  }

  private List<PackageUrl> convertToPackageUrl(final List<MavenArtifact> artifacts) {
    return artifacts.stream().map(this::getPackageUrl)
        .collect(Collectors.toList());
  }

  private PackageUrl getPackageUrl(final MavenArtifact artifact) {
    return PackageUrl.builder().type("maven")
        .namespace(artifact.getGroupId())
        .name(artifact.getArtifactId())
        .version(artifact.getVersion())
        .build();
  }
}

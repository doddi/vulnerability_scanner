package org.sonatype.vul_highlighter.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.vul_highlighter.module.JarParser;
import org.sonatype.vul_highlighter.module.VulnerableComponent;
import org.sonatype.vul_highlighter.service.ScannerService;
import org.sonatype.vul_highlighter.service.VulnerabilityService;

import com.intellij.openapi.components.ServiceManager;
import org.jetbrains.idea.maven.model.MavenArtifact;

public class VulnerabilityServiceImpl
    implements VulnerabilityService
{
  private Map<String, VulnerableComponent> components = new HashMap<>();

  @Override
  public void scan(final List<MavenArtifact> artifacts) {
    final List<PackageUrl> componentsToScan = convertToPackageUrl(artifacts);
    final ScannerService service = ServiceManager.getService(ScannerService.class);

    final List<VulnerableComponent> vulnerableComponents = service.scan(componentsToScan);
    vulnerableComponents.forEach( vulnComponent -> artifacts.stream()
        .filter(artifact -> getPackageUrl(artifact).equals(vulnComponent.getPackageUrl()))
        .findFirst()
        .ifPresent(a -> {
          vulnComponent.setFile(a.getFile());
          JarParser.findClasses(vulnComponent);
        }));

    components.clear();
    vulnerableComponents.forEach(c -> components.put(c.getPackageUrl().toString(), c));
  }

  /**
   * Check if any of the classes associated with a vulnerable component exists,
   * this indicates that the import is indeed vulnrable.
   * @param name
   * @return {@code true} if import is vulnerable
   */
  @Override
  public Optional<VulnerableComponent> isVulnerable(final String name) {
    return components.values().stream()
        .filter(component -> component.getClasses().contains(name))
        .findFirst();
  }

  @Override
  public Map<String, VulnerableComponent> getVulnerableComponents() {
    return this.components;
  }

  private void removeVulnerableComponentsNoLongerInProject(final List<VulnerableComponent> componentsToScan) {
    for (VulnerableComponent vulnerableComponent : components.values()) {
      if (!componentsToScan.contains(vulnerableComponent.getPackageUrl())) {
        components.remove(vulnerableComponent);
      }
    }
  }

  private List<PackageUrl> convertToPackageUrl(final List<MavenArtifact> artifacts) {
    return artifacts.stream().map(this::getPackageUrl)
        .collect(Collectors.toList());
  }

  private PackageUrl getPackageUrl(final MavenArtifact artifact) {
    return PackageUrl.builder().type("maven")
        .namespace(artifact.getGroupId())
        .name(artifact.getArtifactId())
        .version(artifact.getVersion())
        .build();
  }
}

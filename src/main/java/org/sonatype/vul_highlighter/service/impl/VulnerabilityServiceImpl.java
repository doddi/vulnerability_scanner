package org.sonatype.vul_highlighter.service.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.vul_highlighter.listener.Populator;
import org.sonatype.vul_highlighter.module.LibraryToScan;
import org.sonatype.vul_highlighter.module.VulnerableComponent;
import org.sonatype.vul_highlighter.service.ScannerService;
import org.sonatype.vul_highlighter.service.VulnerabilityService;

import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VulnerabilityServiceImpl
    implements VulnerabilityService
{
  public static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityServiceImpl.class);

  private Populator populator;

  @Override
  public void setPopulator(final Populator populator) {
    this.populator = populator;
  }

  @Override
  public void checkLibraries(final Set<LibraryToScan> libraries) {
    final ScannerService scannerService = ScannerService.getInstance();
    final List<PackageUrl> componentsToScan = collectPackageUrls(libraries);
    final List<VulnerableComponent> vulnerableComponents = scannerService.scan(componentsToScan);

    populate(libraries, vulnerableComponents, populator);
  }

  private void populate(final Set<LibraryToScan> libraries,
                        final List<VulnerableComponent> vulnerableComponents,
                        final Populator populator) {
    populator.populate(libraries, vulnerableComponents);
  }

  @NotNull
  private List<PackageUrl> collectPackageUrls(final Set<LibraryToScan> libraries) {
    return libraries.stream()
        .map(LibraryToScan::getPackageUrl)
        .collect(Collectors.toList());
  }


  @Override
  public Optional<VulnerableComponent> isVulnerable(final String name) {
    return populator.isVulnerable(name);
  }

  @Override
  public Map<String, VulnerableComponent> getVulnerableComponents() {
    return this.populator.getVulnerableComponents();
  }
}

package org.sonatype.vul_highlighter.service.impl;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.vul_highlighter.module.JarParser;
import org.sonatype.vul_highlighter.module.ScannedComponent;
import org.sonatype.vul_highlighter.service.VulnerabilityService;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.idea.maven.model.MavenArtifact;

public class VulnerabilityServiceImpl
    implements VulnerabilityService
{
  private Map<String, ScannedComponent> components = new HashMap<>();

  public VulnerabilityServiceImpl() {
  }

  @Override
  public void scan(final List<MavenArtifact> artifacts) {
    final List<ScannedComponent> packageUrls = convertToPurl(artifacts);

    removeVulnerableComponentsNoLongerInProject(packageUrls);

    // TODO Perform a scan

    // TODO Update vulnerable components - testing only
    final Random random = new Random();
    final int nextInt = random.nextInt(artifacts.size());
    final ScannedComponent scannedComponent = packageUrls.get(nextInt);

    try {
      JarParser.findClasses(scannedComponent);
    }
    catch (IOException e) {
      e.printStackTrace();
    }

    components.put(scannedComponent.getPackageUrl().toString(), scannedComponent);
  }

  /**
   * Check if any of the classes associated with a vulnerable component exists,
   * this indicates that the import is indeed vulnrable.
   * @param name
   * @return {@code true} if import is vulnerable
   */
  @Override
  public boolean isVulnerable(final String name) {
    return components.values().stream()
        .anyMatch(component -> component.getClasses().contains(name));
  }

  @Override
  public Map<String, ScannedComponent> getVulnerableComponents() {
    return this.components;
  }

  private void removeVulnerableComponentsNoLongerInProject(final List<ScannedComponent> packageUrls) {
    for (ScannedComponent scannedComponent : components.values()) {
      if (!packageUrls.contains(scannedComponent.getPackageUrl())) {
        components.remove(scannedComponent);
      }
    }
  }

  private List<ScannedComponent> convertToPurl(final List<MavenArtifact> artifacts) {
    return artifacts.stream().map(artifact ->
        new ScannedComponent(PackageUrl.builder().type("maven")
            .namespace(artifact.getGroupId())
            .name(artifact.getArtifactId())
            .version(artifact.getVersion())
            .build(), artifact.getFile(), null))
        .collect(Collectors.toList());
  }

  @Nullable
  @Override
  public Map<String, ScannedComponent> getState() {
    return components;
  }

  @Override
  public void loadState(@NotNull final Map<String, ScannedComponent> state) {
    System.out.println("Loading");
  }
}

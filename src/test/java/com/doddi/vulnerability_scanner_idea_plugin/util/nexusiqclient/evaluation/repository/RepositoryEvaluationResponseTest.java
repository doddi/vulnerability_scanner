package com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.repository;

import java.io.InputStream;
import java.io.InputStreamReader;

import com.google.gson.Gson;
import org.junit.Before;
import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

public class RepositoryEvaluationResponseTest
{
  private RepositoryEvaluationResponse underTest;

  @Before
  public void setUp() throws Exception {
    final Gson gson = new Gson();
    final InputStream resourceAsStream = this.getClass().getResourceAsStream("repository_evaluation_response.json");
    InputStreamReader inputStreamReader = new InputStreamReader(resourceAsStream);

    underTest = gson.fromJson(inputStreamReader, RepositoryEvaluationResponse.class);
  }

  @Test
  public void canParseResponse() {
    assertThat(underTest.getComponentEvalResults().size(), is(2));
    assertThat(underTest.getComponentEvalResults().get(0).getRequestIndex(), is(0));
    assertThat(underTest.getComponentEvalResults().get(0).getPolicyAlerts().length, is(8));
  }

  @Test
  public void canParsePolicyAlerts() {
    final PolicyAlert[] policyAlerts = underTest.getComponentEvalResults().get(0).getPolicyAlerts();

    assertThat(policyAlerts.length, is(8));
    assertThat(policyAlerts[0].getTrigger().getPolicyId(), is("048b2cd348da4232bfbbe01f6dd63c3e"));
    assertThat(policyAlerts[0].getTrigger().getPolicyName(), is("Architecture-Quality"));
    assertThat(policyAlerts[0].getTrigger().getThreatLevel(), is(1));

    assertThat(policyAlerts[1].getTrigger().getPolicyId(), is("4d31e8de2b174a34b696f8388ffc819b"));
    assertThat(policyAlerts[1].getTrigger().getPolicyName(), is("Security-High"));
    assertThat(policyAlerts[1].getTrigger().getThreatLevel(), is(9));
  }

  @Test
  public void canParseComponentFacts() {
    final ComponentFact[] componentFacts = underTest.getComponentEvalResults().get(0).getPolicyAlerts()[1].getTrigger()
        .getComponentFacts();

    assertThat(componentFacts[0].getConstraintFacts().length, is(1));

    assertThat(componentFacts[0].getConstraintFacts()[0].getConstraintName(), is("High risk CVSS score"));
    assertThat(componentFacts[0].getConstraintFacts()[0].getConditionFacts().length, is(2));
    assertThat(componentFacts[0].getConstraintFacts()[0].getConditionFacts()[0].getReason(),
        is("Found security vulnerability CVE-2017-5647 with severity >= 7 (severity = 7.5)"));
    assertThat(componentFacts[0].getConstraintFacts()[0].getConditionFacts()[0].getReference().getValue(),
        is("CVE-2017-5647"));
  }
}

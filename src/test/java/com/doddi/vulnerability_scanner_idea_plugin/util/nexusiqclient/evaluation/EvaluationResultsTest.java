package com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation;

import java.io.InputStream;
import java.io.InputStreamReader;

import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.license.LicenseData;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.policy.PolicyData;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.policy.PolicyViolation;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.security.SecurityData;
import com.google.gson.Gson;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class EvaluationResultsTest
{
  private EvaluationResults underTest;

  @Before
  public void setUp() throws Exception {
    final Gson gson = new Gson();
    final InputStream inputStream = this.getClass().getResourceAsStream("evaluation_response.json");
    final InputStreamReader streamReader = new InputStreamReader(inputStream);

    underTest = gson.fromJson(streamReader, EvaluationResults.class);
  }

  @Test
  public void canConvertComponent() {
    assertEquals("2020-06-30T12:13:23.497+01:00", underTest.getSubmittedDate());
    assertEquals(4, underTest.getResults().length);
    final EvaluationResult[] results = underTest.getResults();
    assertEquals("pkg:maven/commons-cli/commons-cli@1.3.1?type=jar", results[0].getComponent().getPackageUrl());
    assertEquals("pkg:maven/com.beust/jcommander@1.78?type=jar", results[1].getComponent().getPackageUrl());
    assertEquals("pkg:maven/commons-collections/commons-collections@3.2.1?type=jar",
        results[2].getComponent().getPackageUrl());
    assertEquals("pkg:maven/com.fasterxml.jackson.core/jackson-core@2.11.0?type=jar",
        results[3].getComponent().getPackageUrl());
  }

  @Test
  public void canConvertLicenseData() {
    final EvaluationResult[] results = underTest.getResults();
    final LicenseData licenseData = results[0].getLicenseData();

    assertEquals(1, licenseData.getDeclaredLicenses().length);
    assertEquals("Apache-2.0", licenseData.getDeclaredLicenses()[0].getLicenseId());
    assertEquals("Apache-2.0", licenseData.getDeclaredLicenses()[0].getLicenseName());

    assertEquals(1, licenseData.getObservedLicenses().length);
    assertEquals("ObservedLicense", licenseData.getObservedLicenses()[0].getLicenseId());
    assertEquals("Apache-2.0", licenseData.getObservedLicenses()[0].getLicenseName());

    assertEquals(1, licenseData.getEffectiveLicenses().length);
    assertEquals("EffectiveLicense", licenseData.getEffectiveLicenses()[0].getLicenseId());
    assertEquals("Apache-2.0", licenseData.getEffectiveLicenses()[0].getLicenseName());

    assertNull(licenseData.getOverridenLicenses());
  }

  @Test
  public void canConvertSecurityData() {
    final EvaluationResult[] results = underTest.getResults();
    final SecurityData securityData = results[2].getSecurityData();

    assertEquals(1, securityData.getSecurityIssues().length);
    assertEquals("sonatype", securityData.getSecurityIssues()[0].getSource());
    assertEquals("sonatype-2015-0002", securityData.getSecurityIssues()[0].getReference());
    assertEquals(9.0, securityData.getSecurityIssues()[0].getSeverity(), 0);
    assertEquals("Open", securityData.getSecurityIssues()[0].getStatus());
    assertEquals("http://www.sonatype.com", securityData.getSecurityIssues()[0].getUrl());
    assertEquals("critical", securityData.getSecurityIssues()[0].getThreatCategory());
  }

  @Test
  public void canConvertPolicyData() {
    final EvaluationResult[] results = underTest.getResults();
    final PolicyData policyData = results[2].getPolicyData();

    assertEquals(2, policyData.getPolicyViolations().length);
    final PolicyViolation policyViolation = policyData.getPolicyViolations()[0];
    assertEquals("7653ef3a759246a3a14130ffc8f84cef", policyViolation.getPolicyId());
    assertEquals("Security-Critical", policyViolation.getPolicyName());
    assertEquals(10, policyViolation.getThreatLevel());
    assertEquals(1, policyViolation.getConstraintViolations().length);
    final ConstraintViolation constraintViolation = policyViolation.getConstraintViolations()[0];
    assertEquals("Critical risk CVSS score", constraintViolation.getConstraintName());
    assertEquals(1, constraintViolation.getReasons().length);
    final ConstraintReason reason = constraintViolation.getReasons()[0];
    assertEquals("Found security vulnerability sonatype-2015-0002 with severity >= 9 (severity = 9.0)",
        reason.getReason());
  }
}

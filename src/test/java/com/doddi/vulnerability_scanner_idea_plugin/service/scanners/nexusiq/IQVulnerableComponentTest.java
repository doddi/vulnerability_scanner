package com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexusiq;

import java.io.InputStream;
import java.io.InputStreamReader;

import org.sonatype.goodies.packageurl.PackageUrl;

import com.doddi.vulnerability_scanner_idea_plugin.service.scanners.nexus.iq.IQVulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResult;
import com.doddi.vulnerability_scanner_idea_plugin.util.nexusiqclient.evaluation.EvaluationResults;
import com.google.common.collect.ImmutableList;
import com.google.gson.Gson;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class IQVulnerableComponentTest
{
  private final Gson gson = new Gson();

  public void setupViolation(final String file, final int component) {
    final InputStream resourceAsStream = this.getClass().getResourceAsStream(file);
    final InputStreamReader streamReader = new InputStreamReader(resourceAsStream);

    final EvaluationResults evaluationResults = gson.fromJson(streamReader, EvaluationResults.class);
    final EvaluationResult result = evaluationResults.getResults()[component];

    underTest.setPackageUrl(PackageUrl.parse(result.getComponent().getPackageUrl()));
    underTest.setReports(ImmutableList.of(result));
  }

  private IQVulnerableComponent underTest = new IQVulnerableComponent();

  @Test
  public void noPolicyViolations() {
    setupViolation("no_policies.json", 0);

    final String packageInformation = underTest.buildPackageInformation("scannerName", "scannerLink");

    assertEquals(
        "Vulnerability information Provided by: <a href=scannerLink>scannerName</a><br><br><i>commons-cli v1.3.1</i> contains <b>0</b> policy violations<br><br><b>Policies:</b><ul></ul>",
        packageInformation);
  }

  @Test
  public void singleArchitectureViolation() {
    setupViolation("architecture_policy.json", 0);

    final String packageInformation = underTest.buildPackageInformation("scannerName", "scannerLink");

    assertEquals(
        "Vulnerability information Provided by: <a href=scannerLink>scannerName</a><br><br><i>commons-collections v3.2.1</i> contains <b>1</b> policy violation<br><br><b>Remediation:</b><br>none<br><br><b>Policies:</b><ul><li>Architecture-Quality<br>Constraints:<br>Version is old<br></li></ul>",
        packageInformation);
  }

  @Test
  public void multipleArchitectureViolation() {
    setupViolation("architecture_policy.json", 1);

    final String packageInformation = underTest.buildPackageInformation("scannerName", "scannerLink");

    assertEquals(
        "Vulnerability information Provided by: <a href=scannerLink>scannerName</a><br><br><i>commons-collections v3.2.1</i> contains <b>1</b> policy violation<br><br><b>Remediation:</b><br>none<br><br><b>Policies:</b><ul><li>Architecture-Quality<br>Constraints:<br>Version is old, Version is stale<br></li></ul>",
        packageInformation);
  }

  @Test
  public void singleSecurityPolicy() {
    setupViolation("security_policy.json", 0);

    final String packageInformation = underTest.buildPackageInformation("scannerName", "scannerLink");

    assertEquals(
        "Vulnerability information Provided by: <a href=scannerLink>scannerName</a><br><br><i>commons-collections v3.2.1</i> contains <b>2</b> policy violations<br><br><b>Remediation:</b><br>none<br><br><b>Policies:</b><ul><li>Security-Critical<br>Constraints:<br>Critical risk CVSS score - Found security vulnerability <a href=\"http://www.sonatype.com\">sonatype-2015-0002</a> with severity >= 9 (severity = 9.0)<br></li><li>Architecture-Quality<br>Constraints:<br>Version is old<br></li></ul>",
        packageInformation);
  }
}
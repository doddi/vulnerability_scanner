package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.io.File;
import java.util.Map;

import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.doddi.vulnerability_scanner_idea_plugin.service.impl.VulnerabilityServiceImpl;
import com.doddi.vulnerability_scanner_idea_plugin.system.maven.MavenProjectTypeDetector;
import com.intellij.openapi.application.Application;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.testFramework.PsiTestUtil;
import com.intellij.testFramework.ServiceContainerUtil;
import com.intellij.testFramework.fixtures.LightJavaCodeInsightFixtureTestCase;
import com.intellij.util.PathUtil;

public class MavenPopulateVulnerabilitiesTest
    extends LightJavaCodeInsightFixtureTestCase
{
  public static final String STRUTS2_JAR = "struts2-core-2.3.20.jar";

  @Override
  protected void setUp() throws Exception {
    super.setUp();

    final String struts = PathUtil.toSystemIndependentName(new File(getTestDataPath() + "/maven/lib")
        .getAbsolutePath());

    PsiTestUtil.addLibrary(
        myFixture.getTestRootDisposable(),
        getModule(),
        "maven:org.apache.struts:struts2-core:2.3.20",
        struts,
        STRUTS2_JAR);
  }

  public void testVulnerabilitiesDownloadedAndCached() {
    //Clear any previous state
    ServiceContainerUtil
        .replaceService(getProject(), VulnerabilityService.class, new VulnerabilityServiceImpl(),
            getTestRootDisposable());
    
    Application application = ApplicationManager.getApplication();

    MavenProjectTypeDetector detector = application.getService(MavenProjectTypeDetector.class);
    VulnerabilityService vulnerabilityService = getProject().getService(VulnerabilityService.class);

    assertTrue("Expected: no vulnerable components before scan",
        vulnerabilityService.getVulnerableComponents().isEmpty());

    detector.start(getProject());

    Map<String, VulnerableComponent> vulnerableComponents = vulnerabilityService.getVulnerableComponents();
    VulnerableComponent vulnerability = vulnerableComponents.get("pkg:maven/org.apache.struts/struts2-core@2.3.20");
    assertNotNull("expected vulnerability for struts2 library",
        vulnerability);

    assertNotEmpty(vulnerability.getVulnerabilities());
  }

  @Override
  protected String getTestDataPath() {
    return "src/test/testData";
  }
}

package com.doddi.vulnerability_scanner_idea_plugin.system;

import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.ossindex.service.api.componentreport.ComponentReportVulnerability;

import com.doddi.vulnerability_scanner_idea_plugin.entity.LibraryToScan;
import com.doddi.vulnerability_scanner_idea_plugin.entity.VulnerableComponent;
import com.doddi.vulnerability_scanner_idea_plugin.service.ScannerManagerService;
import com.doddi.vulnerability_scanner_idea_plugin.service.VulnerabilityService;
import com.doddi.vulnerability_scanner_idea_plugin.service.scanners.dummy.DummyScannerService;
import com.google.common.collect.ImmutableMap;
import com.intellij.codeInsight.daemon.impl.HighlightInfo;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.project.Project;
import com.intellij.testFramework.ServiceContainerUtil;
import com.intellij.testFramework.fixtures.LightJavaCodeInsightFixtureTestCase;
import org.jetbrains.annotations.NotNull;

import static java.util.Collections.singletonList;
import static java.util.stream.Collectors.toList;

public class MavenAnnotationTest
    extends LightJavaCodeInsightFixtureTestCase
{
  public void testAnnotation() {
    ServiceContainerUtil
        .replaceService(ApplicationManager.getApplication(), ScannerManagerService.class,
            new TestServiceManagerService(),
            getTestRootDisposable());

    VulnerabilityService.getInstance(getProject()).setPopulator(mockPopulator("maven", "com.test", "test", "1.0"));

    myFixture.configureByText(getTestName(false) + ".java", "import java.util.List;class A { }");

    List<String> annotations = myFixture.doHighlighting()
        .stream()
        .map(HighlightInfo::getToolTip)
        .collect(toList());

    assertContainsElements(annotations,
        singletonList(
            "Vulnerability information Provided by: <a href=https://www.sonatype.com>" + DummyScannerService.NAME +
                "</a>\n" +
                "\n" +
                "<i>pkg:maven/com.test/test@1.0</i>: contains <b>1</b> vulnerability\n" +
                "\n" +
                "<ul><li><a href=http://uri>vuln-title</a></li></ul>"));
  }

  private class TestServiceManagerService
      extends ScannerManagerService
  {
    @Override
    public String getCurrentScannerName() {
      return ServiceManager.getService(DummyScannerService.class).getName();
    }

    @Override
    public String getCurrentScannerLink() {
      return ServiceManager.getService(DummyScannerService.class).getUrl();
    }

    @Override
    public List<VulnerableComponent> scan(final Project project, final List<PackageUrl> componentsToScan) {
      return ServiceManager.getService(DummyScannerService.class).scan(project, componentsToScan);
    }
  }

  private Populator mockPopulator(final String type,
                                  final String namespace,
                                  final String name,
                                  final String version)
  {
    return new Populator()
    {
      @Override
      public void populate(final Set<LibraryToScan> libraries, final List<VulnerableComponent> vulnerableComponents) {

      }

      @Override
      public Map<String, VulnerableComponent> getVulnerableComponents() {
        return ImmutableMap.of(name, buildComponent().get());
      }

      @Override
      public Optional<VulnerableComponent> isVulnerable(final String name) {
        return buildComponent();
      }

      @NotNull
      private Optional<VulnerableComponent> buildComponent() {
        VulnerableComponent vulnerableComponent = new VulnerableComponent();
        vulnerableComponent.setPackageUrl(PackageUrl.builder().type(type)
            .namespace(namespace)
            .name(name)
            .version(version)
            .build());
        vulnerableComponent.setVulnerabilities(singletonList(buildVulnerability()));
        return Optional.of(vulnerableComponent);
      }

      private ComponentReportVulnerability buildVulnerability() {
        ComponentReportVulnerability componentReportVulnerability = new ComponentReportVulnerability();
        componentReportVulnerability.setTitle("vuln-title");
        componentReportVulnerability.setReference(URI.create("http://uri"));
        return componentReportVulnerability;
      }
    };
  }
}
